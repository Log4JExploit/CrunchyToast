/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.websocket.impl;

import web.log4jexploit.crunchytoast.websocket.util.OpCode;
import en.zadex.BitStream;

import java.security.SecureRandom;

// Coded by Zadex at 17/10/2022
public final class WSPacket {

    private BitStream maskKey;     // 4 bytes long mask key
    private BitStream payload;     // the isolated payload
    private BitStream packet;      // the entire packet
    private OpCode opCode;

    private boolean extensionBit1; // RSV1
    private boolean extensionBit2; // RSV2
    private boolean extensionBit3; // RSV3
    private boolean finalMessage;  // fin
    private boolean masked;           // is data masked?


    public WSPacket() {

    }

    public WSPacket(boolean fin, boolean masked, OpCode opCode, BitStream payload, boolean extBit1, boolean extBit2, boolean extBit3) {
        this.finalMessage = fin;
        this.opCode = opCode;
        this.payload = new BitStream(payload);
        this.extensionBit1 = extBit1;
        this.extensionBit2 = extBit2;
        this.extensionBit3 = extBit3;
        this.masked = masked;
        this.packet = new BitStream();

        if(masked)
            this.createMaskKey();
    }


    public static WSPacket build() {
        return new WSPacket();
    }

    public WSPacket createMaskKey() {
        BitStream stream = new BitStream();
        stream.add(new SecureRandom().generateSeed(4));
        this.maskKey = stream;
        return this;
    }

    public boolean isMasked() {
        return this.masked;
    }

    public boolean isFinalMessage() {
        return this.finalMessage;
    }

    public boolean isExtensionBit1() {
        return extensionBit1;
    }

    public boolean isExtensionBit2() {
        return extensionBit2;
    }

    public boolean isExtensionBit3() {
        return extensionBit3;
    }

    public WSPacket setExtensionBit1(boolean extensionBit1) {
        this.extensionBit1 = extensionBit1;
        return this;
    }

    public WSPacket setExtensionBit2(boolean extensionBit2) {
        this.extensionBit2 = extensionBit2;
        return this;
    }

    public WSPacket setExtensionBit3(boolean extensionBit3) {
        this.extensionBit3 = extensionBit3;
        return this;
    }

    public WSPacket setFinalMessage(boolean finalMessage) {
        this.finalMessage = finalMessage;
        return this;
    }

    public WSPacket setMask(boolean masked) {
        this.masked = masked;
        return this;
    }

    public WSPacket setMaskKey(BitStream maskKey) {
        this.maskKey = maskKey;
        return this;
    }

    public WSPacket setOpCode(OpCode opCode) {
        this.opCode = opCode;
        return this;
    }

    public WSPacket setPacket(BitStream packet) {
        this.packet = packet;
        return this;
    }

    public WSPacket setPayload(BitStream payload) {
        this.payload = payload;
        return this;
    }

    public BitStream getMaskKey() {
        return maskKey;
    }

    public BitStream getPacket() {
        return packet;
    }

    public BitStream getPayload() {
        return payload;
    }

    public int getPayLoadLength() {
        return this.payload.getByteArray().length;
    }

    public OpCode getOpCode() {
        return opCode;
    }
}
