/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.request.content.impl;

import web.log4jexploit.crunchytoast.http.request.content.inf.IBodyContentReader;
import web.log4jexploit.crunchytoast.http.request.inf.HttpMessage;
import web.log4jexploit.crunchytoast.http.util.DecodingInputStream;
import web.log4jexploit.crunchytoast.http.util.Http;
import web.log4jexploit.crunchytoast.http.util.UncheckedIOReader;

import java.io.InputStream;

public class BodyContentReaderDirect implements IBodyContentReader {

    private final Http.Encoding[] encodings;
    private final UncheckedIOReader reader;
    private final HttpMessage message;

    private int counter;
    private byte[] content;
    private boolean decoded;


    public BodyContentReaderDirect(HttpMessage message) {
        this.encodings = message.getContentEncodings();
        this.message = message;
        this.counter = 0;

        this.reader = new UncheckedIOReader(message.getClient().getInputStream());
        this.content = new byte[message.getContentLength()];
    }


    public void readAll() {
        read(this.content.length - this.counter);
    }

    public void read() {
        if(counter >= this.content.length)
            return;

        content[counter] = reader.read();
        counter++;
    }

    public void read(int count) {
        if(counter >= this.content.length)
            return;

        if(counter + count > this.content.length)
            count = this.content.length - this.counter;

        reader.readNBytes(this.content, this.counter, count);
        content[counter] = reader.read();
        counter++;
    }

    @Override
    public void decode() {
        if(decoded)
            return;

        if(this.counter < this.content.length)
            readAll();

        String[] encodings = new String[this.encodings.length];
        for(int i = 0; i < encodings.length; i++)
            encodings[i] = this.encodings[i].toString();

        DecodingInputStream decodingInputStream = new DecodingInputStream(encodings, this.content);
        this.content = decodingInputStream.readAllBytes();
        this.decoded = true;
    }

    public byte[] getDecoded() {
        decode();
        return this.content;
    }

    @Override
    public void onFlushRemaining() {
        readAll();
        decode();
    }

    @Override
    public Http.Encoding[] getEncodings() {
        return this.encodings;
    }

    @Override
    public InputStream getInputStream() {
        return this.message.getClient().getInputStream();
    }

    public int getContentLength() {
        return this.content.length;
    }

    public int getBytesRead() {
        return counter;
    }
}
