/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 */

package web.log4jexploit.crunchytoast.http.request.inf;

import web.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import web.log4jexploit.crunchytoast.general.Client;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.impl.HttpResponseImpl;
import web.log4jexploit.crunchytoast.http.util.Http;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public interface HttpResponse extends Cloneable {

    ContentCoder receive(Client client, InputStream in) throws IOException, HttpProtocolException;

    ContentCoder send(Client client) throws IOException;

    void setResponseCode(Http.ResponseCode responseCode);

    void setResponseProtocol(String requestProtocol);

    void setHeader(HttpHeaderType headerType, String headerValue);

    void setCustomHeader(String identifier, String headerValue);

    void setContent(byte[] content);

    byte[] getContent();

    Http.ResponseCode getResponseCode();

    String getResponseProtocol();

    String getHeader(HttpHeaderType headerType);

    String getCustomHeader(String identifier);

    HashMap<HttpHeaderType, String> getHeaders();

    HashMap<String, String> getCustomHeaders();

    HttpResponse clone();

    static HttpResponse createDefault() {
        return new HttpResponseImpl();
    }
}
