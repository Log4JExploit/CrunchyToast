package web.log4jexploit.crunchytoast.http.request;

import web.log4jexploit.crunchytoast.exceptions.FileAccessException;
import web.log4jexploit.crunchytoast.exceptions.ResourceNotFoundException;
import web.log4jexploit.crunchytoast.general.Pair;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;
import web.log4jexploit.crunchytoast.http.inf.HttpClient;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.inf.HttpRequest;
import web.log4jexploit.crunchytoast.http.request.inf.HttpResponse;
import web.log4jexploit.crunchytoast.http.util.Http;


// Coded by Zadex at 16.10.22
public abstract class RequestHandler {

    public final Pair<HttpResponse, ContentCoder> handleRequest(HttpClient connection, HttpRequest request, ContentCoder contentCoder) {

        Pair<HttpResponse, ContentCoder> response = connection.getResourceManager().checkForListeners(request, contentCoder);

        if (response == null) {
            RequestHandler handler = connection.getServer().getRequestHandler();

            response = switch (request.getRequestType()) {
                case GET -> handler.processGet(request, contentCoder);
                case HEAD -> handler.processHead(request, contentCoder);
                case POST -> handler.processPost(request, contentCoder);
                case CONNECT -> handler.processConnect(request, contentCoder);
                case DELETE -> handler.processDelete(request, contentCoder);
                case OPTIONS -> handler.processOptions(request, contentCoder);
                case PATCH -> handler.processPatch(request, contentCoder);
                case PUT -> handler.processPut(request, contentCoder);
                case TRACE -> handler.processTrace(request, contentCoder);
            };
        }

        if(response != null)
            return response;

        response = new Pair<>(HttpResponse.createDefault(), null);
        try {
            response.setValueA(connection.getResourceManager().findResource(request.getRequestURI()));
        } catch (FileAccessException e) {
            response.getValueA().setResponseCode(Http.ResponseCode.OK);
        } catch (ResourceNotFoundException e) {
            response.getValueA().setResponseCode(Http.ResponseCode.NOT_FOUND);
        } finally {
            response.getValueA().setHeader(
                    HttpHeaderType.CONNECTION,
                    connection.getServer().isEnabledKeepAlive() ? "Keep-Alive" : "Close"
            );
        }

        try {
            response.setValueB(response.getValueA().send(connection));
            return response;
        } catch (Exception e) {
            RuntimeException exception = new RuntimeException("Couldn't send the response in the RequestHandler class!");
            exception.initCause(e);
            throw exception;
        }
    }

    public Pair<HttpResponse, ContentCoder> processGet(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processPost(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processHead(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processDelete(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processConnect(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processOptions(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processPut(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processTrace(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

    public Pair<HttpResponse, ContentCoder> processPatch(HttpRequest request, ContentCoder contentCoder) {
        return null;
    }

}
