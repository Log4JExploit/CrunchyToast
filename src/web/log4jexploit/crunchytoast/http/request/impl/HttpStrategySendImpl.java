/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.request.impl;

import web.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import web.log4jexploit.crunchytoast.general.Client;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;
import web.log4jexploit.crunchytoast.http.request.content.impl.BodyContentWriterChunked;
import web.log4jexploit.crunchytoast.http.request.content.impl.BodyContentWriterDirect;
import web.log4jexploit.crunchytoast.http.request.content.inf.IBodyContentWriter;
import web.log4jexploit.crunchytoast.http.request.inf.HttpMessage;
import web.log4jexploit.crunchytoast.http.request.inf.Strategy;
import web.log4jexploit.crunchytoast.http.util.UncheckedIOWriter;

import java.util.Map;

public class HttpStrategySendImpl implements Strategy.Connection {

    // Syntax here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages

    private IBodyContentWriter contentWriter;
    private UncheckedIOWriter writer;
    private HttpMessage message;


    @Override
    public void initialize(Client client, HttpMessage message) {
        this.message = message;
        this.writer = new UncheckedIOWriter(client.getOutputStream());
    }


    @Override
    public void execute() {
        performChecks();
        createContentHandler();
        sendHeaders();
    }

    @Override
    public void executeTrailers() {
        sendTrailers();
    }


    private void sendHeaders() {
        for(Map.Entry<HttpHeaderType, String> header : this.message.getHeaders().entrySet()) {
            this.writer.writeLine(header.getKey().toString()+": "+header.getValue());
        }
        for(Map.Entry<String, String> header : this.message.getCustomHeaders().entrySet()) {
            this.writer.writeLine(header.getKey()+": "+header.getValue());
        }
        this.writer.writeLine("");
        this.writer.flush();
    }

    private void performChecks() {
        if(message.isChunkedTransfer() && message.getContentLength() > 0) {
            if(this.message.getSecurityPolicy().isDiscardWhenInvalid())
                throw new HttpProtocolException("ContentLength and TransferEncoding are both set!");
            this.message.removeHeader(HttpHeaderType.CONTENT_LENGTH);
        }

        if(!this.message.getHeaders().containsKey(HttpHeaderType.TRANSFER_ENCODING) && !this.message.getHeaders().containsKey(HttpHeaderType.CONTENT_TYPE)) {
            this.message.removeHeader(HttpHeaderType.TRAILER);
            this.message.getTrailers().clear();
            this.message.getCustomTrailers().clear();
        }

        if(this.message.getTrailerFields().length > this.message.getSecurityPolicy().getMaxHeaderCount())
            throw new HttpProtocolException("Maximum trailer count exceeded!");
    }

    private void createContentHandler() {
        if(this.message.isChunkedTransfer()) {
            this.contentWriter = new BodyContentWriterChunked();
        } else if(this.message.getContentLength() > 0) {
            this.contentWriter = new BodyContentWriterDirect(
                    this.message
            );
            this.contentWriter.encode();
        } else {
            this.contentWriter = null;
        }
    }

    private void sendTrailers() {
        for(Map.Entry<HttpHeaderType, String> header : this.message.getHeaders().entrySet()) {
            this.writer.writeLine(header.getKey().toString()+": "+header.getValue());
        }
        for(Map.Entry<String, String> header : this.message.getCustomTrailers().entrySet()) {
            this.writer.writeLine(header.getKey()+": "+header.getValue());
        }
        this.writer.writeLine("");
        this.writer.flush();
    }

    @Override
    public IBodyContentWriter getContentHandler() {
        return this.contentWriter;
    }
}
