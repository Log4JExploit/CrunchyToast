/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.impl;

import web.log4jexploit.crunchytoast.exceptions.ShutdownException;
import web.log4jexploit.crunchytoast.general.Client;
import web.log4jexploit.crunchytoast.logger.impl.LoggerDisabledImpl;
import web.log4jexploit.crunchytoast.logger.impl.LoggerTimeImpl;
import web.log4jexploit.crunchytoast.logger.inf.Logger;
import web.log4jexploit.crunchytoast.http.inf.HttpClient;
import web.log4jexploit.crunchytoast.http.inf.HttpEventHandler;
import web.log4jexploit.crunchytoast.http.inf.HttpServer;

import javax.net.ServerSocketFactory;
import java.io.File;
import java.io.IOException;
import java.net.*;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.concurrent.CopyOnWriteArrayList;

// Coded by Zadex at 14/10/2022
public final class HttpServerImpl implements HttpServer {

    private final CopyOnWriteArrayList<HttpClient> activeConnections;
    private final ResourceManager resourceManager;
    private final int port;

    private HttpEventHandler internalEventHandler;
    private HttpEventHandler eventHandler;

    private ServerSocket serverSocket;
    private String bindingIP;
    private Thread listener;
    private Logger logger;

    private int maxContentLength;
    private int maxConnections;

    private boolean enableKeepAlive;
    private boolean initialized;
    private boolean alive;



    public HttpServerImpl(int port) {
        this.port = port;
        this.activeConnections = new CopyOnWriteArrayList<>();

        this.eventHandler = new HttpEventHandler() {};

        String path = Path.of("").toAbsolutePath().toString();
        this.resourceManager = new ResourceManagerImpl(new File(path+File.separator+"resources"));
        this.logger = new LoggerTimeImpl(System.out, this.getClass());
        this.bindingIP = null;

        this.maxConnections = 0;
        this.maxContentLength = -1;
        this.initialized = false;
        this.enableKeepAlive = true;
    }

    /**
     * Initializes and generates a {@link ServerSocket}
     * @return the newly created {@link ServerSocket}
     * @throws IOException Is thrown when binding to a specific port or address fails
     */
    private ServerSocket createServerSocket() throws IOException {
        if(this.bindingIP == null) {
            this.serverSocket = new ServerSocket(this.port);
        } else {
            InetSocketAddress address = new InetSocketAddress(this.bindingIP, this.port);
            this.serverSocket = ServerSocketFactory.getDefault().createServerSocket(this.port,-1, address.getAddress());
        }

        return this.serverSocket;
    }

    /**
     * Prepare the server for startup
     */
    private void initialize() {

        this.internalEventHandler = new HttpEventHandler() {
            @Override
            public void onDisconnect(Client client) {
                getLogger().info(client.getIP()+" disconnected");
                HttpServerImpl.this.activeConnections.remove((HttpClient)client);
                new Thread(() -> HttpServerImpl.this.eventHandler.onDisconnect(client)).start();
            }

            @Override
            public void onConnect(Client client) {
                getLogger().info(client.getIP()+" connected");
                HttpServerImpl.this.activeConnections.add((HttpClient) client);
                new Thread(() -> HttpServerImpl.this.eventHandler.onConnect(client)).start();
            }
        };

        listener = new Thread(this::run);
        this.initialized = true;
        this.alive = false;
    }

    private void run() {
        try (ServerSocket currentServerSocket = this.createServerSocket()) {
            alive = true;
            logger.info("Waiting for connections...");

            while (this.alive) {
                // Remove all inactive clients
                this.activeConnections.removeIf(client -> !client.isAlive());

                // If the connection limit has been reached, do not accept new connections
                while(maxConnections > 0 && this.activeConnections.size() >= maxConnections) {
                    Thread.onSpinWait();
                }

                Socket socket = currentServerSocket.accept();
                HttpClient connection = new HttpClientImpl(socket, this, this.internalEventHandler);
                connection.start();
            }
        } catch (BindException e) {
            logger.alert("Port "+port+" is already in use!");
        } catch (Exception e) {
            logger.debugError(e);
        } finally {
            this.initialized = false;
            this.alive = false;
            logger.warn("Shutting down...");
        }

        try {
            // Close all remaining connections after shutdown
            int remaining = activeConnections.size();

            for(Client c : new LinkedList<>(activeConnections))
                c.close();

            logger.warn("Closed "+remaining+" remaining connections!");
        } catch (Exception e) {
            logger.debugError(e);
        }
    }

    /**
     * Starts the server
     */
    @Override
    public void start() {
        if(alive) {
            logger.warn("Server already started!");
            return;
        }

        this.initialize();

        if(!initialized) {
            logger.alert("Server startup failed!");
            return;
        }

        logger.info("Starting HTTP server...");
        listener.start();
    }

    @Override
    public void close() throws InterruptedException {
        if(alive) {
            alive = false;
            try {
                serverSocket.close();
                listener.join();
            } catch (IOException e) {
                throw new ShutdownException("Shutdown failed unexpectedly: "+e.getMessage(), e);
            }
        }
    }

    @Override
    public void setEventHandler(HttpEventHandler eventHandler) {
        if(eventHandler == null)
            throw new IllegalArgumentException("Illegal argument: EventHandler cannot be null!");
        this.eventHandler = eventHandler;
    }

    @Override
    public void setBindingIP(String ip) {
        this.bindingIP = ip;
    }

    @Override
    public void setMaxContentLength(int maxContentLength) {
        this.maxContentLength = maxContentLength;
    }

    @Override
    public void setKeepAlive(boolean enableKeepAlive) {
        this.enableKeepAlive = enableKeepAlive;
    }

    @Override
    public boolean isAlive() {
        return alive;
    }

    @Override
    public boolean isKeepAlive() {
        return enableKeepAlive;
    }

    @Override
    public int getPort() {
        return port;
    }

    @Override
    public String getBindingIP() {
        return this.bindingIP;
    }

    @Override
    public ResourceManager getResourceManager() {
        return resourceManager;
    }

    @Override
    public ArrayList<HttpClient> getActiveConnections() {
        return new ArrayList<>(activeConnections);
    }

    @Override
    public void setMaxConnections(int amount) {
        this.maxConnections = amount;
    }

    @Override
    public HttpEventHandler getEventHandler() {
        return this.eventHandler;
    }

    @Override
    public Logger getLogger() {
        return logger;
    }

    @Override
    public void setLogger(Logger logger) {
        this.logger = logger;
    }

    @Override
    public int getMaxContentLength() {
        return maxContentLength;
    }
}
