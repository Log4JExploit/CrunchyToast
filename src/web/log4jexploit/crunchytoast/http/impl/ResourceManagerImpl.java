/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.impl;

import web.log4jexploit.crunchytoast.exceptions.FileAccessException;
import web.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import web.log4jexploit.crunchytoast.exceptions.ResourceNotFoundException;
import web.log4jexploit.crunchytoast.general.Pair;
import web.log4jexploit.crunchytoast.http.header.HeaderValue;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;
import web.log4jexploit.crunchytoast.http.inf.HttpClient;
import web.log4jexploit.crunchytoast.http.inf.ResourceListener;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.inf.HttpRequest;
import web.log4jexploit.crunchytoast.http.request.inf.HttpResponse;
import web.log4jexploit.crunchytoast.http.util.Http;

import java.io.*;
import java.util.ArrayList;

// Coded by Zadex at 15/10/2022
final class ResourceManagerImpl implements ResourceManager {

    private final ArrayList<ResourceListener> listeners;
    private File resourceFolder;


    public ResourceManagerImpl(File resourceFolder) {
        this.listeners = new ArrayList<>();
        this.resourceFolder = resourceFolder;
    }


    @Override
    public ResourceListener findListeners(HttpRequest request, ContentCoder contentCoder) {
        for(ResourceListener anyListener : listeners) {
            if(!anyListener.getMethods().contains(request.getRequestType()))
                continue;
            for (String anyURI : anyListener.getURIs())
                if (anyURI.equals(request.getRequestURI()))
                    return anyListener;
        }
        return null;
    }

    @Override
    public void clearListeners() {
        this.listeners.clear();
    }

    @Override
    public Pair<HttpResponse, ContentCoder> handleRequest(HttpRequest request, ContentCoder contentCoder)
            throws IOException, HttpProtocolException
    {
        Pair<HttpResponse, ContentCoder> response = new Pair<>(HttpResponse.createDefault(), null);
        ResourceListener listener = findListeners(request, contentCoder);

        try {
            if(listener == null) {
                response.setValueA(findResource(request.getRequestURI()));
                return response;
            }

            response = listener.process(
                    request,
                    contentCoder,
                    ((HttpClient)request.getClient()).getServer()
            );
            response.getValueA().setHeader(
                    HttpHeaderType.CONNECTION,
                    ((HttpClient)request.getClient()).getServer().isKeepAlive() ? "Keep-Alive" : "Close"
            );
        } catch (FileAccessException | ResourceNotFoundException e) {
            response.getValueA().setResponseCode(Http.ResponseCode.NOT_FOUND);
            response.getValueA().setHeader(HttpHeaderType.CONNECTION, "Close");
        }
        return response;
    }

    @Override
    public HttpResponse findResource(String requestURI) throws
            FileAccessException,
            ResourceNotFoundException,
            IOException
    {
        File file = new File(this.resourceFolder.getAbsolutePath() + requestURI);

        if(!file.exists() || file.isDirectory())
            throw new ResourceNotFoundException();

        if(!file.getAbsolutePath().startsWith(resourceFolder.getAbsolutePath())) {
            throw new FileAccessException();
        }

        Http.ContentType contentType = Http.ContentType.BIN;

        if (file.getName().contains("."))
            contentType = Http.ContentType.byAlias(file.getName().split("\\.")[1]);

        HeaderValue contentTypeHeader = new HeaderValue();
        contentTypeHeader.create(contentType.toString());

        HttpResponse response = HttpResponse.createDefault();
        response.setHeader(HttpHeaderType.CONTENT_TYPE, contentTypeHeader.toString());

        FileInputStream in = new FileInputStream(file);
        response.setContent(in.readAllBytes());
        in.close();

        return response;
    }

    @Override
    public void registerListener(ResourceListener listener) {
        for(ResourceListener any : listeners)
            if(any == listener)
                return;
        listeners.add(listener);
    }

    @Override
    public void unregisterListener(ResourceListener listener) {
        for(ResourceListener any : new ArrayList<>(listeners))
            if(any == listener)
                listeners.remove(listener);
    }

    @Override
    public void setResourceFolder(String path) {
        this.resourceFolder = new File(path);
    }

    @Override
    public ArrayList<ResourceListener> getListeners() {
        return new ArrayList<>(this.listeners);
    }

    @Override
    public File getResourceFolder() {
        return this.resourceFolder;
    }
}
