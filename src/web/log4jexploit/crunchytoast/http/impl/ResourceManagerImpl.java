/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.impl;

import web.log4jexploit.crunchytoast.exceptions.FileAccessException;
import web.log4jexploit.crunchytoast.exceptions.ResourceNotFoundException;
import web.log4jexploit.crunchytoast.general.Pair;
import web.log4jexploit.crunchytoast.http.header.HeaderValue;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;
import web.log4jexploit.crunchytoast.http.inf.HttpClient;
import web.log4jexploit.crunchytoast.http.inf.ResourceListener;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.inf.HttpRequest;
import web.log4jexploit.crunchytoast.http.request.inf.HttpResponse;
import web.log4jexploit.crunchytoast.http.util.Http;

import java.io.*;
import java.util.ArrayList;

// Coded by Zadex at 15/10/2022
final class ResourceManagerImpl implements ResourceManager {

    private final ArrayList<ResourceListener> listeners;
    private File resourceFolder;


    public ResourceManagerImpl(File resourceFolder) {
        this.listeners = new ArrayList<>();
        this.resourceFolder = resourceFolder;
    }


    @Override
    public Pair<HttpResponse, ContentCoder> checkForListeners(HttpRequest request, ContentCoder contentCoder) {
        for(ResourceListener anyListener : listeners) {
            if(!anyListener.getMethods().contains(request.getRequestType()))
                continue;
            for (String anyURI : anyListener.getURIs())
                if (anyURI.equals(request.getRequestURI()))
                    return anyListener.process(request, contentCoder, ((HttpClient) request.getClient()).getServer());
        }
        return null;
    }

    @Override
    public void clearListeners() {
        this.listeners.clear();
    }


    @Override
    public HttpResponse findResource(String requestURI) throws FileAccessException, ResourceNotFoundException {

        File file = new File(this.resourceFolder.getAbsolutePath()+requestURI);

        if(!file.exists() || file.isDirectory())
            throw new ResourceNotFoundException();
        if(file.getAbsolutePath().startsWith(resourceFolder.getAbsolutePath())) {
            try {
                HttpResponse response = HttpResponse.createDefault();

                boolean hasFileExtension = file.getName().contains(".");
                Http.ContentType contentType = Http.ContentType.BIN;

                if (hasFileExtension)
                    contentType = Http.ContentType.byAlias(file.getName().split("\\.")[1]);

                HeaderValue contentTypeHeader = new HeaderValue();
                contentTypeHeader.create(contentType.toString());
                response.setHeader(HttpHeaderType.CONTENT_TYPE,contentTypeHeader.toString());

                FileInputStream in = new FileInputStream(file);

                long start = System.currentTimeMillis();

                response.setContent(in.readAllBytes());
                in.close();

                return response;
            } catch (Exception ignored) {
                return HttpResponse.createDefault();
            }
        } else {
            throw new FileAccessException();
        }
    }

    @Override
    public void registerListener(ResourceListener listener) {
        for(ResourceListener any : listeners)
            if(any == listener)
                return;
        listeners.add(listener);
    }

    @Override
    public void unregisterListener(ResourceListener listener) {
        for(ResourceListener any : new ArrayList<>(listeners))
            if(any == listener)
                listeners.remove(listener);
    }

    @Override
    public void setResourceFolder(String path) {
        this.resourceFolder = new File(path);
    }

    @Override
    public ArrayList<ResourceListener> getListeners() {
        return new ArrayList<>(this.listeners);
    }

    @Override
    public File getResourceFolder() {
        return this.resourceFolder;
    }
}
