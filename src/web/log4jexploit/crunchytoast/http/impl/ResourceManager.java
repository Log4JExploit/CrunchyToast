/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 */

package web.log4jexploit.crunchytoast.http.impl;

import web.log4jexploit.crunchytoast.exceptions.FileAccessException;
import web.log4jexploit.crunchytoast.exceptions.ResourceNotFoundException;
import web.log4jexploit.crunchytoast.general.Pair;
import web.log4jexploit.crunchytoast.http.inf.ResourceListener;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.inf.HttpRequest;
import web.log4jexploit.crunchytoast.http.request.inf.HttpResponse;

import java.io.File;
import java.util.ArrayList;

public interface ResourceManager {

    /**
     * Searches for the requested file within the declared resource folder
     * @param requestURI the incoming request
     * @return the content of the requested file
     * @throws FileAccessException If the URI resolves to a file that is stored outside the resource folder.
     * @throws ResourceNotFoundException If the URI resolves to a file that doesn't exist.
     */
    HttpResponse findResource(String requestURI) throws FileAccessException, ResourceNotFoundException;

    /**
     * Checks weather any ResourceListeners have been previously declared for the given URI.
     * @param request the incoming request
     * @return The HttpResponse generated by a matching ResourceListener, null otherwise.
     */
    Pair<HttpResponse, ContentCoder> checkForListeners(HttpRequest request, ContentCoder contentCoder);

    void clearListeners();

    void registerListener(ResourceListener listener);

    void unregisterListener(ResourceListener listener);

    void setResourceFolder(String path);

    ArrayList<ResourceListener> getListeners();

    File getResourceFolder();

    static ResourceManager createDefault(String pathToFolder) {
        return new ResourceManagerImpl(new File(pathToFolder));
    }
}
