/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.util;

import web.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import web.log4jexploit.crunchytoast.general.Pair;
import web.log4jexploit.crunchytoast.http.header.HttpHeaderType;
import web.log4jexploit.crunchytoast.http.impl.ResourceManager;
import web.log4jexploit.crunchytoast.http.request.content.ContentCoder;
import web.log4jexploit.crunchytoast.http.request.inf.HttpRequest;
import web.log4jexploit.crunchytoast.http.request.inf.HttpResponse;
import web.log4jexploit.crunchytoast.http.inf.HttpServer;
import web.log4jexploit.crunchytoast.http.inf.ResourceListener;

import java.io.IOException;
import java.util.List;

// Coded by Zadex at 22/10/2022
public final class IndexListener implements ResourceListener {

    private static final String page404 = """
                        <h1>404 Not Found! IndexListener</h1>
                        """;

    private final String url;


    public IndexListener(String url) {
        this.url = url;
    }


    @Override
    public Pair<HttpResponse, ContentCoder> process(HttpRequest request, ContentCoder contentCoder, HttpServer server) throws IOException, HttpProtocolException {
        contentCoder.readAll();

        HttpResponse response = HttpResponse.createDefault();
        response.setHeader(HttpHeaderType.CONNECTION, server.isKeepAlive() ? "Keep-Alive" : "Close");
        response.setResponseCode(Http.ResponseCode.NOT_FOUND);
        response.setContent(page404.getBytes());
        response.setHeader(HttpHeaderType.CONTENT_TYPE, Http.ContentType.HTML.toString());

        try {
            return new Pair<>(response, response.send(request.getClient()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<Http.RequestType> getMethods() {
        return List.of(Http.RequestType.GET);
    }

    @Override
    public List<String> getURIs() {
        return List.of("/", url);
    }
}
