/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.http.util;

public class HttpSecurityPolicy implements Cloneable {

    private long maxHeaderCount;
    private long maxLineLength;
    private long maxContentLength;
    private boolean discardWhenInvalid;
    private boolean enableChunkedTransfer;

    private HttpSecurityPolicy() {

    }


    public void setMaxHeaderCount(long maxHeaderCount) {
        this.maxHeaderCount = maxHeaderCount;
    }

    public long getMaxHeaderCount() {
        return maxHeaderCount;
    }


    public long getMaxLineLength() {
        return maxLineLength;
    }

    public void setMaxLineLength(int maxLineLength) {
        this.maxLineLength = maxLineLength;
    }


    public boolean isDiscardWhenInvalid() {
        return discardWhenInvalid;
    }

    public void setDiscardWhenInvalid(boolean discardWhenInvalid) {
        this.discardWhenInvalid = discardWhenInvalid;
    }


    public void setMaxContentLength(long maxContentLength) {
        this.maxContentLength = maxContentLength;
    }

    public long getMaxContentLength() {
        return maxContentLength;
    }


    public void setEnableChunkedTransfer(boolean enableChunkedTransfer) {
        this.enableChunkedTransfer = enableChunkedTransfer;
    }

    public boolean isEnabledChunkedTransfer() {
        return enableChunkedTransfer;
    }


    @Override
    public HttpSecurityPolicy clone() {
        HttpSecurityPolicy securityPolicy = new HttpSecurityPolicy();
        securityPolicy.discardWhenInvalid = discardWhenInvalid;
        securityPolicy.maxHeaderCount = maxHeaderCount;
        securityPolicy.maxLineLength = maxLineLength;
        securityPolicy.maxContentLength = maxContentLength;
        securityPolicy.enableChunkedTransfer = enableChunkedTransfer;
        return securityPolicy;
    }


    public static HttpSecurityPolicy createDefault() {
        HttpSecurityPolicy policy = new HttpSecurityPolicy();
        policy.maxHeaderCount = 64;
        policy.maxLineLength = 4096;
        policy.discardWhenInvalid = true;
        policy.maxContentLength = Double.valueOf(Math.pow(1024, 3)).longValue();
        return policy;
    }

    public static HttpSecurityPolicy unrestricted() {
        HttpSecurityPolicy policy = new HttpSecurityPolicy();
        policy.maxHeaderCount = Long.MAX_VALUE;
        policy.maxLineLength = Long.MAX_VALUE;
        policy.discardWhenInvalid = false;
        policy.maxContentLength = Long.MAX_VALUE;
        policy.enableChunkedTransfer = true;
        return policy;
    }
}
