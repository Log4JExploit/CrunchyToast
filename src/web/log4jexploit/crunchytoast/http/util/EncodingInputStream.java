/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 */

package web.log4jexploit.crunchytoast.http.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.DeflaterInputStream;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.InflaterOutputStream;

// Coded by Zadex at 24/10/2022
public final class EncodingInputStream extends InputStream {

    private final ByteArrayInputStream inputStream;
    private final byte[] bytes;

    public EncodingInputStream(String[] encodings, byte[] data) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        buffer.write(data);
        buffer.flush();

        for (String encoding : encodings) {
            byte[] content = buffer.toByteArray();
            buffer.reset();
            switch (encoding) {
                case "gzip" -> {
                    GZIPOutputStream gzipOutputStream = new GZIPOutputStream(buffer, true);
                    gzipOutputStream.write(content);
                    gzipOutputStream.flush();
                    gzipOutputStream.close();
                }
                case "deflate" -> {
                    DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(buffer, true);
                    deflaterOutputStream.write(content);
                    deflaterOutputStream.flush();
                    deflaterOutputStream.close();
                }
            }
            buffer.flush();
        }
        this.bytes = buffer.toByteArray();
        this.inputStream = new ByteArrayInputStream(bytes);
    }

    public byte[] getBytes() {
        return this.bytes;
    }

    @Override
    public byte[] readAllBytes() {
        return this.inputStream.readAllBytes();
    }

    @Override
    public int read() {
        return this.inputStream.read();
    }
}
