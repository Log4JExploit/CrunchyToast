/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package web.log4jexploit.crunchytoast.cert;

import javax.net.ServerSocketFactory;
import javax.net.ssl.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

// Coded by Zadex at 15/10/2022
public final class CertManagerImpl implements CertManager {

    private String certFileName = "cert.pem";
    private String keyFileName = "key.pem";

    private char[] password = "password".toCharArray();
    private ServerSocketFactory serverSocketFactory;
    private File certFolder;
    private boolean loaded;


    public CertManagerImpl() {
        this.certFolder = new File(Path.of("").toAbsolutePath()+File.separator+"certificates");
    }


    @Override
    public void createFactory() {
        try {
            if (!certFolder.exists()) {
                certFolder.mkdir();
                throw new FileNotFoundException("Certificates directory doesn't exist!");
            }

            var certPath = Path.of(certFolder.getAbsolutePath() + File.separator + certFileName);
            var keyPath = Path.of(certFolder.getAbsolutePath() + File.separator + keyFileName);

            File certFile = new File(certPath.toAbsolutePath().toString());
            File keyFile = new File(keyPath.toAbsolutePath().toString());

            if (!certFile.exists()) {
                throw new FileNotFoundException(certFile.getAbsolutePath() + " doesn't exist!");
            }

            if (!keyFile.exists()) {
                throw new FileNotFoundException(certFile.getAbsolutePath() + " doesn't exist!");
            }

            byte[] certData = Files.readAllBytes(certFile.toPath());
            Certificate[] chain = CertificateFactory.getInstance("X509").generateCertificates(new ByteArrayInputStream(certData)).toArray(new Certificate[] {});

            String keyDataEncoded = Files.readString(keyFile.toPath())
                    .replace("-----BEGIN PRIVATE KEY-----", "")
                    .replace("-----END PRIVATE KEY-----", "")
                    .replace("\n", "")
                    .replace("\r", "");

            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(keyDataEncoded));
            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);

            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(null, password);
            keyStore.setCertificateEntry("certChain", chain[0]);

            keyStore.setEntry("privateKey", new KeyStore.PrivateKeyEntry(privateKey, chain), new KeyStore.PasswordProtection(password));

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("PKIX");
            keyManagerFactory.init(keyStore, this.password);
            KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("PKIX");
            trustManagerFactory.init(keyStore);
            TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();

            SSLContext ctx2 = SSLContext.getInstance("TLSv1.3");
            ctx2.init(keyManagers, trustManagers, new SecureRandom());

            this.serverSocketFactory = ctx2.getServerSocketFactory();
            this.loaded = true;
        } catch (FileNotFoundException e) {
            // Make the application fail, if a file couldn't be found.
            throw new RuntimeException(e);
        } catch (Exception e) {
            this.loaded = false;
            RuntimeException runtimeException = new RuntimeException("Couldn't create certificate factories: "+e.getMessage());
            runtimeException.setStackTrace(e.getStackTrace());
            throw runtimeException;
        }
    }


    @Override
    public void setCertificateFolder(String path) {
        this.certFolder = new File(path);
    }

    @Override
    public void setCertificateFile(String fileName) {
        this.certFileName = fileName;
    }

    @Override
    public void setPrivateKeyFile(String fileName) {
        this.keyFileName = fileName;
    }

    @Override
    public void setPrivateKeyPassword(char[] password) {
        this.password = password;
    }

    @Override
    public boolean hasLoaded() {
        return loaded;
    }

    @Override
    public ServerSocketFactory getServerSocketFactory() {
        return this.serverSocketFactory;
    }

    @Override
    public File getCertificateFolder() {
        return this.certFolder;
    }

    @Override
    public String getCertificateFileName() {
        return this.certFileName;
    }

    @Override
    public String getKeyFileName() {
        return this.keyFileName;
    }
}
