package web.log4jexploit.crunchytoast.logger.impl;

import web.log4jexploit.crunchytoast.logger.inf.Logger;
import web.log4jexploit.crunchytoast.logger.NotificationLevel;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UncheckedIOException;
import java.text.SimpleDateFormat;
import java.util.Date;

// Coded by Zadex at 15/10/2022
public final class SimpleTimeLoggerImpl implements Logger {

    private final ByteArrayOutputStream buffer;
    private final OutputStream out;
    private final String source;
    private NotificationLevel notificationLevel;
    private boolean blocked;


    public SimpleTimeLoggerImpl(OutputStream out, Class<?> clazz) {
        this.buffer = new ByteArrayOutputStream();
        this.out = out;
        this.notificationLevel = NotificationLevel.DEBUG;
        this.source = clazz == null ? "Unknown" : clazz.getSimpleName();
    }

    public SimpleTimeLoggerImpl(Class<?> clazz) {
        this.buffer = new ByteArrayOutputStream();
        this.out = new ByteArrayOutputStream();
        this.notificationLevel = NotificationLevel.DEBUG;
        this.source = clazz == null ? "Unknown" : clazz.getSimpleName();
    }


    private void waitForUnblock() {
        while(this.blocked) {
            Thread.onSpinWait();
        }
        this.blocked = true;
    }

    @Override
    public void unblock() {
        this.blocked = false;
    }

    @Override
    public void print(String text) {
        try {
            this.out.write(text.getBytes());
            this.buffer.write(text.getBytes());
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @Override
    public void println(String text) {
        this.print(text+"\n");
    }

    @Override
    public void debug(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.DEBUG.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [DEBUG] <["+this.source+"]>: "+text);
        unblock();
    }

    @Override
    public void info(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.INFO.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [INFO] <["+this.source+"]>: "+text);
        unblock();
    }

    @Override
    public void warn(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.WARN.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [WARN] <["+this.source+"]>: "+text);
        unblock();
    }

    @Override
    public void alert(String text) {
        waitForUnblock();
        this.println("["+getTime()+"] [ALERT] <["+this.source+"]>: "+text);
        unblock();
    }

    @Override
    public void alert(Exception e) {
        waitForUnblock();
        this.println("["+getTime()+"] [ALERT] <["+this.source+"]>: "+e.getMessage());
        for(StackTraceElement s : e.getStackTrace()) {
            this.println("["+getTime()+"] [ALERT] <["+this.source+"]>: "+s);
        }

        unblock();
    }

    @Override
    public void saveTo(OutputStream out) {
        waitForUnblock();
        try {
            buffer.writeTo(out);
        } catch (Exception ignored) {
            // Ignore write error
        }
        unblock();
    }

    @Override
    public void setNotificationLevel(NotificationLevel notificationLevel) {
        this.notificationLevel = notificationLevel;
    }

    private String getTime() {
        return new SimpleDateFormat("dd.MM.yyyy HH:mm a").format(new Date()).toUpperCase();
    }

    @Override
    public OutputStream getOutputStream() {
        return this.out;
    }

    @Override
    public ByteArrayOutputStream getBuffer() {
        return buffer;
    }
}
