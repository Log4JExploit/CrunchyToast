/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.resource.tree;

import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.TreeNode;
import github.log4jexploit.crunchytoast.resource.Resource;
import github.log4jexploit.crunchytoast.resource.ResourceBuffered;
import org.junit.Test;

import java.util.List;
import java.util.function.Supplier;

import static org.junit.Assert.*;

public class ResourceTreeTest {

    private final TreeNode<String, String> node1 = new TreeNode<>("node1", "custom1");
    private final TreeNode<String, String> node2 = new TreeNode<>("node2", "custom2");
    private final TreeNode<String, String> node3 = new TreeNode<>("node3", "custom3");

    Supplier<ResourceTree<String>> tree = () -> {
        TreeNode<String, String> root = new TreeNode<>("root");
        root.set(node1);
        root.set(node2);
        node2.set(node3);

        return new ResourceTree<>(root) {

            @Override
            public List<String> mapElements(String element) {
                return null;
            }

            @Override
            public String mapName(String element) {
                return element;
            }

            @Override
            public Resource mapResource(String element) {
                return new ResourceBuffered(
                        element.getBytes(), Http.ContentType.TXT
                );
            }
        };
    };

    @Test
    public void testApplyCorrect() {
        assertTrue(tree.get().apply("node2/node3").isPresent());
    }

    @Test
    public void testApplyWrong() {
        assertFalse(tree.get().apply("node2/node0").isPresent());
    }

    @Test
    public void testApplyInvalid() {
        assertFalse(tree.get().apply("node2 node0").isPresent());
    }

    @Test
    public void testApplyNullString() {
        assertThrows(NullPointerException.class, () -> tree.get().apply((String)null));
    }

    @Test
    public void testApplyNullRequest() {
        assertThrows(NullPointerException.class, () -> tree.get().apply((HttpRequest) null));
    }
}
