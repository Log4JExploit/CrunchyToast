/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import github.log4jexploit.crunchytoast.general.Pair;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;

import static org.junit.Assert.*;

public class TreeNodeTest {

    Supplier<TreeNode<String, Object>> tree = () -> {
        TreeNode<String, Object> root = new TreeNode<>("root");
        root.addChild(new TreeNode<>("node1", "custom1"));

        TreeNode<String, Object> node2 = new TreeNode<>("node2", "custom2");
        root.addChild(node2);

        TreeNode<String, Object> node3 = new TreeNode<>("node3", "custom3");
        node2.addChild(node3);

        return root;
    };


    @Test
    public void testMatchesOkay() {
        assertTrue(tree.get().matches("root"));
    }

    @Test
    public void testMatchesWrong() {
        assertFalse(tree.get().matches("any"));
    }

    @Test
    public void testMatchesNull() {
        assertThrows(NullPointerException.class, () -> tree.get().matches(null));
    }


    @Test
    public void testFindOkay() {
        assertTrue(tree.get().find("node1").isPresent());
    }

    @Test
    public void testFindWrong() {
        assertFalse(tree.get().find("node0").isPresent());
    }

    @Test
    public void testFindNull() {
        assertThrows(NullPointerException.class, () -> tree.get().find(null));
    }


    @Test
    public void testSearchOkay() {
        List<String> path = List.of("node2", "node3");
        Optional<Object> result = tree.get().search(path.listIterator());
        assertTrue(result.isPresent());
        assertEquals("custom3", result.get());
    }

    @Test
    public void testSearchWrong() {
        List<String> path = List.of("node2", "node0");
        Optional<Object> result = tree.get().search(path.listIterator());
        assertFalse(result.isPresent());
    }

    @Test
    public void testSearchNull() {
        List<String> path = List.of();
        assertThrows(IllegalArgumentException.class, () -> tree.get().search(path.listIterator()));
    }

    @Test
    public void testPopulateOkay() {
        TreeNode<String, String> root = new TreeNode<>("root", "ABC");
        TreeNode.populate(root, (text) -> {
            if(text.isBlank())
                return List.of();

            return Arrays.stream(text.split(""))
                    .map((e) -> new Pair<>(e, ""))
                    .toList();
        });
        assertEquals(3, root.getChildren().size());
    }

}
