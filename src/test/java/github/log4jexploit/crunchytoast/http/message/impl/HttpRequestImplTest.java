/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.impl;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.Pair;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class HttpRequestImplTest {

    private final HttpRequestImpl request = new HttpRequestImpl();

    @Test
    public void testSetResourcePathNull() {
        assertThrows(IllegalArgumentException.class, () -> request.setResourcePath(null));
    }

    @Test
    public void testSetResourcePathBlank() {
        assertThrows(IllegalArgumentException.class, () -> request.setResourcePath(" "));
    }

    @Test
    public void testSetResourcePathNoSlashPrefix() {
        assertThrows(IllegalArgumentException.class, () -> request.setResourcePath("myResource.html"));
    }

    @Test
    public void testSetResourceCorrect() {
        request.setResourcePath("/myResource.html");
    }


    @Test
    public void testConstructURIFirstParamNull() {
        assertThrows(NullPointerException.class, () -> request.constructURI(null, new HashMap<>()));
    }

    @Test
    public void testConstructURISecondParamNull() {
        assertThrows(NullPointerException.class, () -> request.constructURI("/uri/link?key=value", null));
    }

    @Test
    public void testConstructURIBothParamsNull() {
        assertThrows(NullPointerException.class, () -> request.constructURI(null, null));
    }

    @Test
    public void testConstructURIPassing() {
        String uri = request.constructURI("/path/to/resource", Map.of("key", "value"));
        assertEquals("/path/to/resource?key=value", uri);
    }

    @Test
    public void testConstructURIMultiPassing() {
        TreeMap<String, String> map = new TreeMap<>(Map.of("key", "value", "key2", "value2"));
        String uri = request.constructURI("/path/to/resource", map);
        assertEquals("/path/to/resource?key=value&key2=value2", uri);
    }

    @Test
    public void testConstructURIParametersNullPassing() {
        HashMap<String, String> map = new HashMap<>();
        map.put(null, null);
        String uri = request.constructURI("/path/to/resource", map);
        assertEquals("/path/to/resource?null=null", uri);
    }


    @Test
    public void testParseURIPassing() {
        String uri = "/path/to/resource?key=value";
        Pair<String, Map<String, String>> result = request.parseURI(uri);
        assertEquals(result.getValueA(), "/path/to/resource");
        assertEquals(result.getValueB(), Map.of("key", "value"));
    }

    @Test
    public void testParseURIEqualsPassing() {
        String uri = "/path/to/resource?key=value=3";
        Pair<String, Map<String, String>> result = request.parseURI(uri);
        assertEquals(result.getValueA(), "/path/to/resource");
        assertEquals(result.getValueB(), Map.of("key", "value=3"));
    }

    @Test
    public void testParseURIMultiPassing() {
        String uri = "/path/to/resource?key=value&key2=value2";
        Pair<String, Map<String, String>> result = request.parseURI(uri);
        assertEquals(result.getValueA(), "/path/to/resource");
        assertEquals(result.getValueB(), Map.of("key", "value", "key2", "value2"));
    }


    @Test
    public void testParseURIParamNullFail() {
        assertThrows(NullPointerException.class, () -> request.parseURI(null));
    }

    @Test
    public void testParseURIKeyEmptyFail() {
        String uri = "/path/to/resource?=value";
        assertThrows(HttpProtocolException.class, () -> request.parseURI(uri));
    }

    @Test
    public void testParseURIValueEmptyFail() {
        String uri = "/path/to/resource?key=";
        assertThrows(HttpProtocolException.class, () -> request.parseURI(uri));
    }

    @Test
    public void testParseURIParamEmptyFail() {
        String uri = "/path/to/resource?";
        assertThrows(HttpProtocolException.class, () -> request.parseURI(uri));
    }



}
