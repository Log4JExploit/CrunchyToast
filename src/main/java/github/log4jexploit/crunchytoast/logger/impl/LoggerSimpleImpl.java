/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.logger.impl;

import github.log4jexploit.crunchytoast.general.LockQueue;
import github.log4jexploit.crunchytoast.logger.NotificationLevel;
import github.log4jexploit.crunchytoast.logger.inf.Logger;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;


public class LoggerSimpleImpl implements Logger {

    private final ByteArrayOutputStream buffer;
    private final OutputStream out;
    protected final LockQueue lock;
    protected final long id;

    protected String source;
    protected NotificationLevel notificationLevel;


    public LoggerSimpleImpl(OutputStream out, Class<?> clazz) {
        this.out = out;
        this.buffer = new ByteArrayOutputStream();
        this.source = clazz == null ? "Unknown" : clazz.getSimpleName();
        this.notificationLevel = NotificationLevel.DEBUG;
        this.id = Logger.register(clazz);
        this.lock = new LockQueue();
    }

    public LoggerSimpleImpl(Class<?> clazz) {
        this(new ByteArrayOutputStream(), clazz);
    }

    @Override
    public void print(String text) {
        try {
            this.out.write(text.getBytes());
            this.out.flush();
        } catch (Exception ignored) {}
        this.buffer.writeBytes(text.getBytes());
    }

    @Override
    public void println(String text) {
        this.print(text+"\n");
    }

    @Override
    public void debug(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.DEBUG.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[DEBUG] <["+fullName()+"]>: "+text);
        });
    }

    @Override
    public void info(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.INFO.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[INFO] <["+fullName()+"]>: "+text);
        });
    }

    @Override
    public void warn(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.WARN.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[WARN] <["+fullName()+"]>: "+text);
        });
    }

    @Override
    public void alert(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.ALERT.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[ALERT] <[" + fullName() + "]>: " + text);
        });
    }

    @Override
    public void debugError(Exception e) {
        if(this.notificationLevel.getLevel() > NotificationLevel.DEBUG.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[DEBUG ERROR] <[" + fullName() + "]>: " + e.getMessage());
            for (StackTraceElement s : e.getStackTrace()) {
                this.println("[DEBUG ERROR] <[" + fullName() + "]>: " + s);
            }
        });
    }

    @Override
    public void warnError(Exception e) {
        if(this.notificationLevel.getLevel() > NotificationLevel.WARN.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[WARN ERROR] <[" + fullName() + "]>: " + e.getMessage());
            for (StackTraceElement s : e.getStackTrace()) {
                this.println("[WARN ERROR] <[" + fullName() + "]>: " + s);
            }
        });
    }

    @Override
    public void alertError(Exception e) {
        if(this.notificationLevel.getLevel() > NotificationLevel.ALERT.getLevel())
            return;
        this.lock.claimAndDo(() -> {
            this.println("[ALERT ERROR] <[" + fullName() + "]>: " + e.getMessage());
            for (StackTraceElement s : e.getStackTrace()) {
                this.println("[ALERT ERROR] <[" + fullName() + "]>: " + s);
            }
        });
    }

    /*public String getTime(String format) {
        return new SimpleDateFormat(format).format(new Date());
    }*/

    @Override
    public void saveTo(OutputStream out) {
        this.lock.claimAndDo(() -> {
            try {
                this.buffer.writeTo(out);
            } catch (Exception ignored) {
            }
        });
    }

    @Override
    public void setNotificationLevel(NotificationLevel notificationLevel) {
        this.notificationLevel = notificationLevel;
    }

    @Override
    public void setClass(Class<?> clazz) {
        this.source = clazz == null ? "Unknown" : clazz.getSimpleName();
    }

    @Override
    public String fullName() {
        return this.source+"-"+this.id;
    }

    @Override
    public OutputStream getOutputStream() {
        return this.out;
    }

    @Override
    public ByteArrayOutputStream getBuffer() {
        return buffer;
    }
}
