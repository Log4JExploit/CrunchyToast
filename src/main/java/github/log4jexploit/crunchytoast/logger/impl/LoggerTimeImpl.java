/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.logger.impl;

import github.log4jexploit.crunchytoast.logger.NotificationLevel;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

public class LoggerTimeImpl extends LoggerSimpleImpl {

    public LoggerTimeImpl(OutputStream out, Class<?> clazz) {
        super(out, clazz);
    }

    public LoggerTimeImpl(Class<?> clazz) {
        this(new ByteArrayOutputStream(), clazz);
    }


    @Override
    public void debug(String text) {
        if(super.notificationLevel.getLevel() > NotificationLevel.DEBUG.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [DEBUG] <["+fullName()+"]>: "+text);
        unblock();
    }

    @Override
    public void info(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.INFO.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [INFO] <["+fullName()+"]>: "+text);
        unblock();
    }

    @Override
    public void warn(String text) {
        if(this.notificationLevel.getLevel() > NotificationLevel.WARN.getLevel())
            return;
        waitForUnblock();
        this.println("["+getTime()+"] [WARN] <["+fullName()+"]>: "+text);
        unblock();
    }

    @Override
    public void alert(String text) {
        waitForUnblock();
        this.println("["+getTime()+"] [ALERT] <["+fullName()+"]>: "+text);
        unblock();
    }

    @Override
    public void debugError(Exception e) {
        if(this.notificationLevel.getLevel() > NotificationLevel.DEBUG.getLevel())
            return;

        waitForUnblock();

        this.println("["+getTime()+"] [DEBUG ERROR] <["+fullName()+"]>: "+e.getMessage());
        for(StackTraceElement s : e.getStackTrace()) {
            this.println("["+getTime()+"] [DEBUG ERROR] <["+fullName()+"]>: "+s);
        }

        unblock();
    }

    @Override
    public void warnError(Exception e) {
        if(this.notificationLevel.getLevel() > NotificationLevel.WARN.getLevel())
            return;

        waitForUnblock();

        this.println("["+getTime()+"] [WARN ERROR] <["+fullName()+"]>: "+e.getMessage());
        for(StackTraceElement s : e.getStackTrace()) {
            this.println("["+getTime()+"] [WARN ERROR] <["+fullName()+"]>: "+s);
        }

        unblock();
    }

    @Override
    public void alertError(Exception e) {
        if (this.notificationLevel.getLevel() > NotificationLevel.ALERT.getLevel())
            return;

        waitForUnblock();

        this.println("[" + getTime() + "] [ALERT ERROR] <[" + fullName() + "]>: " + e.getMessage());
        for (StackTraceElement s : e.getStackTrace()) {
            this.println("[" + getTime() + "] [ALERT ERROR] <[" + fullName() + "]>: " + s);
        }

        unblock();
    }

    private String getTime() {
        return new SimpleDateFormat("dd.MM.yyyy HH:mm a").format(new Date()).toUpperCase();
    }
}
