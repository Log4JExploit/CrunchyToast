/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.strategy;

import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentEmpty;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentWriterChunked;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentWriterDirect;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentHandler;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.message.inf.HttpMessage;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOWriter;
import github.log4jexploit.crunchytoast.resource.Resource;
import github.log4jexploit.crunchytoast.resource.ResourceCoded;
import github.log4jexploit.crunchytoast.resource.ResourceEmpty;
import github.log4jexploit.crunchytoast.server.Client;

import java.util.Map;

public class StrategyMessageSendImpl implements Strategy.Message {

    // Protocol reference here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages

    private IBodyContentHandler contentWriter;
    private UncheckedIOWriter writer;
    private HttpMessage message;


    /**
     * This initializes this {@link Message} with the given parameters.
     * @param client the target client
     * @param message the message to send
     */
    @Override
    public void initialize(Client client, HttpMessage message) {
        this.message = message;
        this.writer = new UncheckedIOWriter(client.getOutputStream());
        this.contentWriter = new BodyContentEmpty();
    }


    /**
     * Sends the header section of the message.<br>
     * This sends all headers and prepares a {@link IBodyContentWriter} for sending the body, if present.
     */
    @Override
    public void execute() {
        this.prepare();
        this.createContentHandler();
        this.sendHeaders();
    }

    private void prepare() {
        applyKeepAlive();
        applyChunkedTransfer();
        applyContentChecks();
    }

    private void applyKeepAlive() {
        if(!this.message.hasHeader(Http.HeaderType.CONNECTION)) {
            this.message.setKeepAlive(this.message.getSecurityPolicy().isKeepAliveByDefault());
        }
    }

    private void applyChunkedTransfer() {
        if(this.message.isChunkedTransfer()) {
            this.message.removeHeader(Http.HeaderType.CONTENT_LENGTH);
        }
    }

    private void applyContentChecks() {
        applyNullRecovery();
        applyContentEmpty();
        applyEncodings();
        applyContentLength();
    }

    private void applyNullRecovery() {
        if(this.message.getContentAsResource() == null) {
            this.message.setContent(new ResourceEmpty());
        }
    }

    private void applyContentEmpty() {
        if(this.message.isChunkedTransfer())
            return;

        if(!this.message.getContentAsResource().isSizeKnown() || this.message.getContentAsResource().getSize() == 0L) {
            this.message.setHeader(Http.HeaderType.CONTENT_LENGTH, "0");
            this.message.removeHeader(Http.HeaderType.CONTENT_TYPE);
        }
    }

    private void applyEncodings() {
        if(this.message.getContentAsResource() instanceof ResourceEmpty)
            return;

        if(this.message.getContentEncodings().length > 0) {
            if(this.message.getContentAsResource() instanceof ResourceCoded) {
                return;
            }
            this.message.setContent(
                    new ResourceCoded(
                            this.message.getContentAsResource(),
                            this.message.getContentEncodings(),
                            ResourceCoded.Mode.ENCODE
                    )
            );
        }
    }

    private void applyContentLength() {
        if(this.message.isChunkedTransfer())
            return;

        if(this.message.getContentAsResource() instanceof ResourceEmpty)
            return;

        this.message.setContentLength(
                this.message.getContentAsResource().getSize()
        );
    }

    /**
     * Sends the trailer section of the message.
     */
    @Override
    public void executeTrailers() {
        sendTrailers();
    }

    /**
     * Sends all headers specified in the message.
     */
    private void sendHeaders() {
        for(Map.Entry<Http.HeaderType, String> header : this.message.getHeaders().entrySet()) {
            this.writer.writeLine(header.getKey().toString()+": "+header.getValue());
        }
        for(Map.Entry<String, String> header : this.message.getCustomHeaders().entrySet()) {
            this.writer.writeLine(header.getKey()+": "+header.getValue());
        }
        this.writer.writeLine();
        this.writer.flush();
    }

    /**
     * Creates a {@link IBodyContentWriter} according to the specifications of the message.
     */
    private void createContentHandler() {
        if(this.message.getContentAsResource() instanceof ResourceEmpty) {
            this.contentWriter = new BodyContentEmpty();
            return;
        }

        if(this.message.isChunkedTransfer()) {
            this.contentWriter = new BodyContentWriterChunked(
                    this::onCallback,
                    this.message.getContentType(),
                    this.message.getClient()
            );
        } else {
            this.contentWriter = new BodyContentWriterDirect(
                    this.message.getContentAsResource(),
                    this::onCallback,
                    this.message.getContentType(),
                    this.message.getClient()
            );
        }
    }

    private void onCallback(Resource resource) {
        sendTrailers();
    }

    /**
     * Sends all trailers specified in the message.
     */
    private void sendTrailers() {
        if(this.message.getTrailers().isEmpty() && this.message.getCustomTrailers().isEmpty())
            return;

        for(Map.Entry<Http.HeaderType, String> header : this.message.getHeaders().entrySet()) {
            this.writer.writeLine(header.getKey().toString() + ": " + header.getValue());
        }

        for(Map.Entry<String, String> header : this.message.getCustomTrailers().entrySet()) {
            this.writer.writeLine(header.getKey() + ": " + header.getValue());
        }

        this.writer.writeLine();
        this.writer.flush();
    }

    @Override
    public IBodyContentWriter getContentHandler() {
        return (IBodyContentWriter) this.contentWriter;
    }
}
