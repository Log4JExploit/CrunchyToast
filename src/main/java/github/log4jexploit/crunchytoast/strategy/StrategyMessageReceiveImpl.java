/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.strategy;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.Client;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentEmpty;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentReaderChunked;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentReaderDirect;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentReaderRaw;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.inf.HttpMessage;
import github.log4jexploit.crunchytoast.http.message.inf.Strategy;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOReader;

import java.util.ArrayList;
import java.util.List;

public class StrategyMessageReceiveImpl implements Strategy.Message {

    // Syntax here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages

    private HttpMessage message;
    private UncheckedIOReader reader;
    private IBodyContentReader contentReader;


    @Override
    public void initialize(Client client, HttpMessage message) {
        this.message = message;
        this.reader = new UncheckedIOReader(client.getInputStream());
    }


    @Override
    public void execute() {
        receiveHeaders();
        this.message.performChecks();
        createContentHandler();
    }

    @Override
    public void executeTrailers() {
        receiveTrailers();
    }


    /**
     * Reads all headers.
     */
    private void receiveHeaders() {
        int count = 0;

        do {
            String line = this.reader.nextLine(
                    this.message.getSecurityPolicy().getMaxLineLength()
            );

            if(line.isBlank())
                break;

            String[] split = line.split(":");
            Http.HeaderType headerType = Http.HeaderType.TE.byString(split[0].trim());
            if(headerType == Http.HeaderType.CUSTOM) {
                this.message.setCustomHeader(
                        split[0].trim().toLowerCase(),
                        split[1].trim()
                );
            } else {
                this.message.setHeader(
                        headerType,
                        split[1].trim()
                );
            }
        } while (++count < message.getSecurityPolicy().getMaxHeaderCount());
    }

    /**
     * Creates a {@link IBodyContentReader} according to the specifications of the message.
     */
    private void createContentHandler() {
        if(this.message.isRawTransfer() && (this.message.isChunkedTransfer() || this.message.getContentLength() > 0)) {
            this.contentReader = new BodyContentReaderRaw(
                    this.message.getContentEncodings(),
                    this.message.getContentLength(),
                    this.message.getClient()
            );
        } else if(this.message.isChunkedTransfer()) {
            this.contentReader = new BodyContentReaderChunked(
                    this,
                    this.message.getClient().getInputStream(),
                    this.message.getContentEncodings()
            );
        } else if(this.message.getContentLength() > 0) {
            this.contentReader = new BodyContentReaderDirect(
                    this.message,
                    this
            );
        } else {
            this.contentReader = new BodyContentEmpty(this.message.getClient());
        }
    }

    private void receiveTrailers() {
        int size = this.message.getTrailers().size() + this.message.getCustomTrailers().size();

        if(size <= 0)
            return;

        ArrayList<Http.HeaderType> expectedTrailers = new ArrayList<>(
                List.of(this.message.getTrailerFields())
        );

        ArrayList<String> expectedCustomTrailers = new ArrayList<>(
                this.message.getCustomTrailers().keySet()
        );

        if(this.contentReader != null)
            this.contentReader.onFlushRemaining();

        for(int i = 0; i < size; i++) {
            String line = reader.nextLine(this.message.getSecurityPolicy().getMaxLineLength());

            if(line.isBlank() || !line.contains(":"))
                throw new HttpProtocolException("Expected a trailer field but found nothing!");

            String[] split = line.split(":");
            split[0] = split[0].toLowerCase().trim();
            split[1] = split[1].trim();

            Http.HeaderType headerType = Http.HeaderType.TE.byString(split[0]);

            if(!expectedTrailers.contains(headerType) && !expectedCustomTrailers.contains(split[0])) {
                throw new HttpProtocolException("Unexpected header in trailer section!");
            }

            if(headerType == Http.HeaderType.CUSTOM)
                this.message.setTrailer(headerType, split[1]);
            else
                this.message.setCustomTrailer(split[0], split[1]);
        }
    }

    @Override
    public IBodyContentReader getContentHandler() {
        return this.contentReader;
    }
}
