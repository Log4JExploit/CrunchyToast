/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.strategy;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOReader;
import github.log4jexploit.crunchytoast.server.Client;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class StrategyRequestReceiveImpl implements Strategy.Request {

    private UncheckedIOReader reader;
    private HttpRequest request;

    @Override
    public void initialize(Client client, HttpRequest request) {
        this.reader = new UncheckedIOReader(client.getInputStream());
        this.request = request;
    }

    @Override
    public void execute() {
        String line = reader.nextLine(
                request.getSecurityPolicy().getMaxLineLength()
        ).trim();

        try {
            String[] split = line.split(" ");

            if(split.length != 3) {
                throw new HttpProtocolException("Incompatible client attempted to connect!");
            }

            String type = split[0].trim().toUpperCase();
            String target = split[1].trim();
            String protocol = split[2].trim();

            if(!this.request.getProtocol().equalsIgnoreCase(protocol)) {
                throw new HttpProtocolException("Protocols don't match up!");
            }

            this.request.setRequestType(Http.RequestType.values()[0].byString(type));

            if(this.request.getRequestType() == Http.RequestType.CONNECT) {
                this.request.setDestination(target);
            } else {
                this.request.setRequestURI(URLDecoder.decode(target, StandardCharsets.UTF_8));
            }
        } catch (Exception e) {
            throw new HttpProtocolException("Error parsing request header: "+e.getMessage());
        }
    }
}
