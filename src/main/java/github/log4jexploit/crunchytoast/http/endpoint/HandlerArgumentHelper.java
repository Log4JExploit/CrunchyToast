/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Cookie;
import github.log4jexploit.crunchytoast.server.Server;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;

class HandlerArgumentHelper {

    private static final Map<HttpArg.Type, BiFunction<HttpRequest, HttpArg, Object>> registry;

    static {
        registry = new HashMap<>();

        registry.put(HttpArg.Type.CLIENT, (r, a) -> r.getClient());
        registry.put(HttpArg.Type.BODY, (r, a) -> r.getBodyContentHandler());
        registry.put(HttpArg.Type.REQUEST, (r, a) -> r);

        registry.put(
                HttpArg.Type.COOKIE,
                (r, a) -> r.getCookie() == null ? null : Cookie.Builder.parse(r.getCookie())
        );

        registry.put(HttpArg.Type.PARAM, (r, a) -> {
            String uri = r.getRequestURI();
            if(!uri.contains("?"))
                return a.required() ? null : "";

            String argList = uri.split("\\?")[1];
            if(argList.isBlank())
                return a.required() ? null : "";

            String[] args = argList.split("&");
            for(String arg : args) {
                String[] keyValue = arg.split("=");
                if(keyValue[0].equalsIgnoreCase(a.value()))
                    return keyValue[1];
            }
            return a.required() ? null : "";
        });

        registry.put(HttpArg.Type.PARAMETERS, (r, a) -> {
            Map<String, String> parameters = new HashMap<>();

            String uri = r.getRequestURI();
            if(!uri.contains("?"))
                return parameters;

            String argList = uri.split("\\?")[1];
            if(argList.isBlank())
                return parameters;

            String[] args = argList.split("&");
            for(String arg : args) {
                String[] keyValue = arg.split("=");
                parameters.put(keyValue[0], keyValue[1]);
            }

            return parameters;
        });
    }

    public static Object createArgument(HttpRequest request, HttpArg arg, Server server) {
        if(arg.type() == HttpArg.Type.SERVER)
            return server;
        return registry.get(arg.type()).apply(request, arg);
    }
}
