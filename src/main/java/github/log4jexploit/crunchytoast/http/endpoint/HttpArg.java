/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.http.inbound.impl.HttpServer;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpClient;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentHandler;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Cookie;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Map;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.PARAMETER)
public @interface HttpArg {

    /**
     * The parameter type. Defines which class the parameter must be.
     */
    Type type() default Type.CLIENT;

    /**
     * Defines if the parameter is necessary to complete the request.
     */
    boolean required() default false;

    /**
     * An optional value that will be used as an identifier. <br>
     */
    String value() default "";

    enum Type {
        BODY(IBodyContentHandler.class, true, false),
        CLIENT(HttpClient.class, false, false),
        REQUEST(HttpRequest.class, false, false),
        PARAMETERS(Map.class, false, false),
        PARAM(Object.class, true, true),
        COOKIE(Cookie.class, true, false),
        SERVER(HttpServer.class, false, false);


        private final Class<?> parameterClass;
        private final boolean nullable;
        private final boolean requiresId;

        Type(Class<?> parameterClass, boolean nullable, boolean requiresId) {
            this.parameterClass = parameterClass;
            this.nullable = nullable;
            this.requiresId = requiresId;
        }

        public boolean isIdRequired() {
            return requiresId;
        }

        public boolean isNullable() {
            return nullable;
        }

        public Class<?> getParameterClass() {
            return parameterClass;
        }
    }
}
