/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.resource.Resource;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;

public class HandlerResultHelper {

    private static final List<Class<?>> primitiveWrappers = List.of(
            Short.class,
            Integer.class,
            Float.class,
            Double.class,
            Long.class,
            Boolean.class,
            Byte.class,
            Character.class,
            short.class,
            int.class,
            float.class,
            double.class,
            long.class,
            boolean.class,
            byte.class,
            char.class
    );

    private static final Map<Class<?>, Function<Object, HttpResponse>> registry;
    private static final Function<Object, HttpResponse> defaultFunction;
    private static final Supplier<HttpResponse> nullFunction;

    static {
        registry = new HashMap<>();

        defaultFunction = object -> HttpResponse.compose()
                .withCode(Http.ResponseCode.OK)
                .withResponse(object.toString())
                .build();

        nullFunction = () -> HttpResponse.compose()
                .withCode(Http.ResponseCode.OK)
                .build();

        registry.put(HttpResponse.class, (object) -> (HttpResponse) object);

        registry.put(LocalDate.class, object -> HttpResponse.compose()
                .withCode(Http.ResponseCode.OK)
                .withResponse(((LocalDate) object).format(DateTimeFormatter.RFC_1123_DATE_TIME))
                .build());

        registry.put(Resource.class, (object) -> {
            Resource resource = (Resource) object;
            HttpResponse response = HttpResponse.compose()
                    .withCode(Http.ResponseCode.OK)
                    .build();
            response.setContent(resource);
            response.setContentType(resource.getContentType());
            response.setContentEncodings(new Http.Encoding[] {Http.Encoding.GZIP});
            response.setKeepAlive(true);
            return response;
        });

        registry.put(Object[].class, (object) -> {
            Object[] array = (Object[]) object;
            StringBuilder builder = new StringBuilder();

            for(Object o : array) {
                boolean isString = o instanceof String;
                boolean isPrimitive = o == null || primitiveWrappers.contains(o.getClass());
                builder.append(", ")
                        .append(isString ? "\"" + o + "\"" : (isPrimitive ? o : o.getClass().getSimpleName() + "@" + o));
            }

            builder.delete(0, 2);
            builder.insert(0,'[');
            builder.insert(builder.length(),']');

            return HttpResponse.Builder
                    .compose()
                    .withCode(Http.ResponseCode.OK)
                    .withResponse(builder.toString())
                    .build();
        });

        registry.put(
                Collection.class,
                (object) -> registry.get(Object[].class).apply(
                         ((Collection<?>) object).toArray()
                )
        );
    }

    public static void registerHandlerIfAbsent(Class<?> clazz, Function<Object, HttpResponse> handler) {
        registry.putIfAbsent(Objects.requireNonNull(clazz), Objects.requireNonNull(handler));
    }

    public static void registerHandler(Class<?> clazz, Function<Object, HttpResponse> handler) {
        registry.put(Objects.requireNonNull(clazz), Objects.requireNonNull(handler));
    }

    public static HttpResponse createResult(Object object) {
        if(object == null)
            return nullFunction.get();

        Function<Object, HttpResponse> function = registry.get(object.getClass());

        /*if(function == null && object instanceof Object[]) {
            function = registry.get(Object[].class);
        }*/

        if(function == null) {
            for(Class<?> clazz : registry.keySet()) {
                if(List.of(object.getClass().getInterfaces()).contains(clazz)) {
                    function = registry.get(clazz);
                    break;
                }
                if(clazz.isInstance(object)) {
                    function = registry.get(clazz);
                    break;
                }
            }
        }

        if(function == null)
            function = defaultFunction;

        return function.apply(object);
    }

}
