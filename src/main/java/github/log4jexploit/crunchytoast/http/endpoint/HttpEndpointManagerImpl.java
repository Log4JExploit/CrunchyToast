/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.exceptions.FileAccessException;
import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.exceptions.ResourceNotFoundException;
import github.log4jexploit.crunchytoast.general.Pair;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;
import github.log4jexploit.crunchytoast.http.util.Http;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;


public class HttpEndpointManagerImpl implements HttpEndpointManager {

    private final ArrayList<HttpEndpointHandler> handlers;
    private File resourceFolder;


    public HttpEndpointManagerImpl(File resourceFolder) {
        this.handlers = new ArrayList<>();
        this.resourceFolder = resourceFolder;
    }


    @Override
    public Pair<HttpResponse, IBodyContentWriter> delegateRequest(HttpRequest request) throws HttpProtocolException {
        return null;
    }

    @Override
    public HttpResource findResource(String requestURI) throws
            FileAccessException,
            ResourceNotFoundException,
            IOException
    {
        File file = new File(this.resourceFolder.getAbsolutePath() + requestURI);

        if(!file.exists() || file.isDirectory())
            throw new ResourceNotFoundException();

        if(!file.getAbsolutePath().startsWith(resourceFolder.getAbsolutePath())) {
            throw new FileAccessException();
        }

        Http.ContentType contentType = Http.ContentType.BIN;

        if (file.getName().contains("."))
            contentType = Http.ContentType.byAlias(file.getName().split("\\.")[1]);

        FileInputStream in = new FileInputStream(file);
        HttpResource resource = new HttpResource(in.readAllBytes(), contentType);
        in.close();

        return resource;
    }

    @Override
    public void registerHandler(Object instance) {
        for(Method method : instance.getClass().getDeclaredMethods()) {
            if(method.isAnnotationPresent(HttpEndpoint.class))
                registerMethod(instance, method);
        }
    }

    @Override
    public void unregisterHandler(Object instance) {
        for(HttpEndpointHandler endpointHandler : List.copyOf(handlers))
            if(endpointHandler.getInstance().getClass().isInstance(instance))
                handlers.remove(endpointHandler);
    }

    @Override
    public void setResourceFolder(String path) {
        this.resourceFolder = new File(path);
    }

    @Override
    public ArrayList<Object> getHandlers() {
        return new ArrayList<>(this.handlers);
    }

    @Override
    public File getResourceFolder() {
        return this.resourceFolder;
    }

    private void registerMethod(Object instance, Method method) {
        HttpEndpoint annotation = method.getAnnotation(HttpEndpoint.class);
        assert annotation != null;

        HttpEndpointHandler endpointHandler = new HttpEndpointHandler(
                annotation.type(),
                annotation.uri(),
                method,
                instance
        );

        this.handlers.add(endpointHandler);
    }
}
