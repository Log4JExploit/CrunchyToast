/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.exceptions.HttpEndpointException;
import github.log4jexploit.crunchytoast.http.util.Http;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.ArrayList;
import java.util.List;

final class EndpointHandler {

    private final Object instance;
    private final Method method;
    private final Http.RequestType requestType;
    private final String uri;
    private final String destination;
    private HttpArg[] parameters;

    public EndpointHandler(Http.RequestType type, String uri, String destination, Method method, Object instance) {
        this.destination = destination;
        this.requestType = type;
        this.instance = instance;
        this.method = method;
        this.uri = uri;
        init();
    }

    private void init() {
        List<HttpArg> parameters = new ArrayList<>();

        for(Parameter parameter : method.getParameters()) {
            if(!parameter.isAnnotationPresent(HttpArg.class))
                throwNonAnnotatedParameter();
            HttpArg argument = parameter.getAnnotation(HttpArg.class);
            parameters.add(argument);
        }

        this.parameters = parameters.toArray(new HttpArg[0]);
    }

    public Object invoke(Object... parameters) {
        // Validate object types
        for (int i = 0; i < parameters.length; i++) {
            if(!this.parameters[i].type().isNullable() && parameters[i] == null)
                throwNullValue();
            if(parameters[i] == null)
                continue;
            if(!this.parameters[i].type().getParameterClass().isInstance(parameters[i])) {
                throwInvalidValue(this.parameters[i].type().getParameterClass());
            }
        }

        try {
            return this.method.invoke(this.instance, parameters);
        } catch (IllegalAccessException | IllegalArgumentException| InvocationTargetException e) {
            throwErrorInvoke(e);
        }
        return null;
    }

    public HttpArg[] getParameters() {
        return parameters;
    }

    public Http.RequestType getRequestType() {
        return requestType;
    }

    public String getURI() {
        return uri;
    }

    public String getDestination() {
        return destination;
    }

    Method getMethod() {
        return method;
    }

    Object getInstance() {
        return instance;
    }

    private void throwNonAnnotatedParameter() {
        throw new HttpEndpointException(
                "Parameter in method "+ method.getName()+
                        " of class " + instance.getClass().getName()+
                        " is not annotated with "+HttpArg.class.getName()+
                        " annotation!"
        );
    }

    private void throwErrorInvoke(Exception cause) {
        throw new HttpEndpointException(
                "An error occurred when " + this.method.getName() +
                        " of class " + this.instance.getClass().getName() +
                        " was invoked: "+cause.getMessage(),
                cause
        );
    }

    private void throwNullValue() {
        throw new HttpEndpointException(
                "Null value was handed to parameter in " + method.getName() +
                        " of class " + this.instance.getClass().getName() +
                        " that was not nullable!"
        );
    }

    private void throwInvalidValue(Class<?> expected) {
        throw new HttpEndpointException(
                "A value was handed to parameter in " + method.getName() +
                        " of class " + this.instance.getClass().getName() +
                        " that was not of class "+ expected.getName()+ "!"
        );
    }
}
