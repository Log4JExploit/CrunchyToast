/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.http.util.Http;

import java.io.*;
import java.nio.file.Files;

public class HttpResourceDynamic implements HttpResource {

    private final Http.ContentType contentType;
    private final File file;


    public HttpResourceDynamic(File file, Http.ContentType contentType) {
        this.contentType = contentType;
        this.file = file;
    }


    @Override
    public Http.ContentType getContentType() {
        return contentType;
    }

    @Override
    public byte[] getData() {
        if(file.length() > Integer.MAX_VALUE)
            throw new RuntimeException("Resource can't be retrieved: Resource would exceed max array size!");
        try {
            return Files.readAllBytes(this.file.toPath());
        } catch (IOException e) {
            throw new UncheckedIOException("Error while reading resource: "+e.getMessage(), e);
        }
    }

    @Override
    public byte[] getDataRange(long offset, int length) {
        offset = Math.min(offset, getSize());
        int minLength = Math.min(length, (int)(this.getSize() - offset));
        byte[] buffer = new byte[minLength];

        try(FileInputStream in = new FileInputStream(file)) {
            long skipped = in.skip(offset);
            if(skipped < offset)
                throw new IOException("Did not skip as many bytes as expected!");
            in.read(buffer, 0, minLength);
        } catch (IOException e) {
            throw new UncheckedIOException("Error while reading resource: "+e.getMessage(), e);
        }
        return buffer;
    }

    @Override
    public InputStream getDataAsStream() {
        try {
            return new FileInputStream(this.file);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @Override
    public long getSize() {
        return this.file.length();
    }

    @Override
    public boolean isSizeKnown() {
        return true;
    }
}
