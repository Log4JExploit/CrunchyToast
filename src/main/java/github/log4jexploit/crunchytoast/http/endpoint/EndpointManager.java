/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.endpoint;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.Server;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;

import java.io.File;
import java.util.ArrayList;

public interface EndpointManager {

    /**
     * Determines how this request will be handled and hands it over to<br>
     * its destination for processing.
     * @param request the incoming request.
     * @return A response created by a corresponding {@link HttpEndpoint} or a
     * matching resource found.
     */
    HttpResponse delegateRequest(HttpRequest request) throws HttpProtocolException;

    /**
     * Searches for the requested resource
     * @param uri the uri of the target resource
     * @return the {@link HttpResource} of the requested resource
     */
    HttpResource findResource(String uri);

    /**
     * Permanently redirects incoming requests to the given destination.
     * This applies to all requests that specifically ask for <b>inbound</b> as a host.
     * @param inbound the ip or domain visible to the outside
     * @param outbound the destination's ip
     * @param port the destination's port
     * @param scheme the protocol scheme to use for the outgoing request
     */
    void reverseProxy(String inbound, String outbound, int port, String scheme);

    void registerHandler(Object instance);

    void unregisterHandler(Object instance);

    void setResourceFolder(String path);

    ArrayList<Object> getHandlers();

    File getResourceFolder();

    static EndpointManager createDefault(String pathToFolder, Server server) {
        return new EndpointManagerImpl(new File(pathToFolder), server);
    }
}
