/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyChunked;
import github.log4jexploit.crunchytoast.http.message.inf.Strategy;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOWriter;
import github.log4jexploit.crunchytoast.http.util.UtilChunks;

import java.io.OutputStream;

public class BodyContentWriterChunked implements IBodyChunked.Writer {

    private final Http.Encoding[] encodings;
    private final Strategy.Message strategy;
    private final UtilChunks util;
    private final OutputStream out;

    private boolean endOfStream;
    private int counter;


    public BodyContentWriterChunked(Strategy.Message strategy, OutputStream out, Http.Encoding[] encodings) {
        this.encodings = encodings;
        this.strategy = strategy;
        this.util = new UtilChunks();
        this.counter = 0;
        this.out = out;
    }


    @Override
    public void writeNextChunk(byte[] encodedData) {
        if(endOfStream)
            return;

        util.writeEncodedChunk(this.out, encodedData);
        this.counter += encodedData.length;

        if(encodedData.length == 0) {
            endOfStream = true;
            this.strategy.executeTrailers();
        }
    }

    @Override
    public void writeNextChunk(byte[] data, int offset, int len) {
        if(endOfStream)
            return;

        util.writeEncodedChunk(this.out, data, offset, len);
        this.counter += len;

        if(len == 0) {
            endOfStream = true;
            this.strategy.executeTrailers();
        }
    }

    @Override
    public void onFlushRemaining() {
        if(!endOfStream)
            writeNextChunk(new byte[0]);
    }

    @Override
    public Http.Encoding[] getEncodings() {
        return this.encodings;
    }

    @Override
    public long getContentLength() {
        return this.counter;
    }

    @Override
    public OutputStream getOutputStream() {
        return this.out;
    }

    @Override
    public UncheckedIOWriter getWriter() {
        return null;
    }

    @Override
    public void encode() {
        // Do nothing
    }
}
