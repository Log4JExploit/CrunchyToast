/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOWriter;
import github.log4jexploit.crunchytoast.resource.Resource;
import github.log4jexploit.crunchytoast.server.Client;

import java.util.function.Consumer;

public class BodyContentWriterDirect extends BodyContentBase implements IBodyContentWriter {

    private final UncheckedIOWriter writer;
    private final Resource resource;


    public BodyContentWriterDirect(Resource resource, Consumer<Resource> callback, Http.ContentType contentType, Client client) {
        super(callback, contentType, client);
        this.writer = new UncheckedIOWriter(getOutputStream());
        this.resource = resource;
    }


    public void writeAll() {
        while(super.counter.get() < this.resource.getSize())
            write(1024 * 128);
    }

    public void write() {
        write(1);
    }

    public void write(int count) {
        if(isFinished())
            return;

        int safe = (int) Math.min((this.resource.getSize() - super.counter.get()), Integer.MAX_VALUE);
        count = Math.min(Math.max(safe, 0), count);

        if(counter.get() + count > this.resource.getSize())
            return;

        byte[] data = this.resource.getDataRange(counter.get(), count);
        writer.write(data);
        writer.flush();

        if(counter.addAndGet(count) >= this.resource.getSize())
            markAsDone();
    }

    public int writeRaw(byte[] buffer) {
        return writeRaw(buffer, 0, buffer.length);
    }

    public int writeRaw(byte[] buffer, int offset, int length) {
        if(length > buffer.length - offset)
            length = Math.min(Math.max(length, 0), buffer.length - offset);

        if(isFinished() || length == 0 || buffer.length == 0)
            return 0;

        int safe = (int) Math.min(this.resource.getSize() - length, Integer.MAX_VALUE);
        int count = Math.min(safe, length);

        writer.write(buffer, offset, count);
        writer.flush();

        if(counter.addAndGet(count) >= resource.getSize())
            markAsDone();

        return count;
    }

    @Override
    public void onFlushRemaining() {
        writeAll();
    }
}
