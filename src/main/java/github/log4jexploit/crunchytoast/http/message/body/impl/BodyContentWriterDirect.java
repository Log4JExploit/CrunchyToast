/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.http.endpoint.HttpResource;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.message.inf.HttpMessage;
import github.log4jexploit.crunchytoast.http.message.inf.Strategy;
import github.log4jexploit.crunchytoast.http.util.EncodingInputStream;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOWriter;

import java.io.OutputStream;

public class BodyContentWriterDirect implements IBodyContentWriter {

    private final Strategy.Message strategy;
    private final Http.Encoding[] encodings;
    private final UncheckedIOWriter writer;

    private boolean encoded;
    private HttpResource resource;
    private int counter;


    public BodyContentWriterDirect(HttpMessage message, Strategy.Message strategy) {
        this.resource = message.getContentAsResource();
        this.encodings = message.getContentEncodings();

        this.strategy = strategy;
        this.counter = 0;

        this.writer = new UncheckedIOWriter(message.getClient().getOutputStream());
    }


    public void writeAll() {
        write(resource.getSize() - counter);
    }

    public void write() {
        write(1);
    }

    public void write(int count) {
        encode();

        if(counter >= content.length || count <= 0)
            return;

        if(counter + count > content.length)
            return;

        writer.write(content, counter, content.length - counter);
        writer.flush();
        counter += count;

        if(counter >= content.length)
            strategy.executeTrailers();
    }

    public int writeRaw(byte[] buffer) {
        int count = buffer.length;

        if(counter >= content.length)
            return 0;

        if(count + counter > content.length)
            count = content.length - counter;

        writer.write(buffer, 0, count);
        counter += count;

        return count;
    }

    public void skipBytesRaw(int count) {
        if(counter >= content.length)
            return;

        if(count + counter > content.length)
            count = content.length - counter;

        writer.write(new byte[count]);
        counter += count;
    }

    @Override
    public void encode() {
        if(encoded)
            return;

        if(this.encodings.length < 1) {
            encoded = true;
            return;
        }

        String[] encodings = new String[this.encodings.length];
        for(int i = 0; i < encodings.length; i++)
            encodings[i] = this.encodings[i].toString();

        EncodingInputStream encodingInputStream = new EncodingInputStream(encodings, this.content);
        this.content = encodingInputStream.readAllBytes();
        this.encoded = true;
    }

    @Override
    public void onFlushRemaining() {
        writeAll();
    }

    @Override
    public Http.Encoding[] getEncodings() {
        return this.encodings;
    }

    @Override
    public OutputStream getOutputStream() {
        return this.writer.getOutputStream();
    }

    @Override
    public UncheckedIOWriter getWriter() {
        return this.writer;
    }

    @Override
    public int getContentLength() {
        return content.length;
    }

    public int getBytesSent() {
        return counter;
    }
}
