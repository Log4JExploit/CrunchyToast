/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.general.Client;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOReader;

import java.io.InputStream;

public class BodyContentReaderRaw implements IBodyContentReader {

    private final Http.Encoding[] encodings;
    private final UncheckedIOReader reader;
    private final int contentLength;
    private final Client client;
    private int counter;


    public BodyContentReaderRaw(Http.Encoding[] encodings, int contentLength, Client client) {
        this.contentLength = contentLength;
        this.encodings = encodings;
        this.client = client;
        this.reader = new UncheckedIOReader(client.getInputStream());
        this.counter = 0;
    }

    public int readRaw(byte[] buffer, int count) {
        if(this.contentLength == 0)
            return readRawUnlimited(buffer, count);

        if(counter >= contentLength)
            return 0;

        if(count + counter > contentLength)
            count = contentLength - counter;

        reader.readNBytes(buffer, 0, count);
        counter += count;

        return count;
    }

    private int readRawUnlimited(byte[] buffer, int count) {
        count = reader.readNBytes(buffer, 0, count);
        counter += count;
        return count;
    }

    public void skipBytes(int count) {
        if(this.contentLength == 0) {
            skipBytesUnlimited(count);
            return;
        }

        if(counter >= contentLength)
            return;

        if(count + counter > contentLength)
            count = contentLength - counter;

        reader.skip(count);
        counter += count;
    }

    private int skipBytesUnlimited(int count) {
        count = reader.skip(count);
        counter += count;
        return count;
    }

    @Override
    public void onFlushRemaining() {
        if(counter < contentLength && contentLength != 0)
            skipBytes(contentLength - counter);
    }

    @Override
    public Http.Encoding[] getEncodings() {
        return encodings;
    }

    @Override
    public int getContentLength() {
        return this.contentLength;
    }

    @Override
    public InputStream getInputStream() {
        return client.getInputStream();
    }

    @Override
    public void decode() {
        // Do nothing
    }
}
