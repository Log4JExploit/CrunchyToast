/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.impl;

import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentEmpty;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.server.Client;
import github.log4jexploit.crunchytoast.strategy.Strategy;
import github.log4jexploit.crunchytoast.strategy.StrategyRequestReceiveImpl;
import github.log4jexploit.crunchytoast.strategy.StrategyRequestSendImpl;


public final class HttpRequestImpl extends HttpMessageImpl implements HttpRequest {

    private Http.RequestType requestType;
    private String requestURI;
    private Strategy.Request strategy;
    private String destination;


    public HttpRequestImpl() {
        this.requestType = Http.RequestType.GET;
        this.requestURI = "/";
        this.destination = "";
    }


    @Override
    public IBodyContentReader receive(Client client) {
        this.client = client;
        this.strategy = new StrategyRequestReceiveImpl();
        this.strategy.initialize(this.client, this);
        this.strategy.execute();

        if(this.requestType != Http.RequestType.HEAD) {
            return super.receive(client);
        }

        return new BodyContentEmpty();
    }

    @Override
    public IBodyContentWriter send(Client client) {
        this.client = client;
        this.prepareSend();
        this.strategy = new StrategyRequestSendImpl();
        this.strategy.initialize(this.client, this);
        this.strategy.execute();
        return super.send(this.client);
    }

    private void prepareSend() {
        if(this.getHost() == null) {
            this.setHost(this.getClient().getAddress());
        }
    }

    @Override
    public Http.RequestType getRequestType() {
        return requestType;
    }

    @Override
    public void setRequestType(Http.RequestType requestType) {
        this.requestType = requestType;
    }

    @Override
    public String getRequestURI() {
        return requestURI;
    }

    @Override
    public void setRequestURI(String requestURI) {
        this.requestURI = requestURI;
    }

    @Override
    public String getRequestDestination() {
        return this.destination;
    }

    @Override
    public void setDestination(String destination) {
        this.destination = destination;
    }

    @Override
    public HttpRequestImpl clone() {
        HttpRequestImpl clone = new HttpRequestImpl();
        clone.setDestination(this.destination);
        clone.setRequestType(this.requestType);
        clone.setRequestURI(this.requestURI);
        clone.setContent(this.resource);

        clone.getHeaders().putAll(this.headers);
        clone.getCustomHeaders().putAll(this.customHeaders);
        clone.getTrailers().putAll(this.trailers);
        clone.getCustomTrailers().putAll(this.customTrailers);
        return clone;
    }
}
