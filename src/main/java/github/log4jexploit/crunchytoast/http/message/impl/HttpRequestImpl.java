/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.impl;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.Pair;
import github.log4jexploit.crunchytoast.http.message.body.impl.BodyContentEmpty;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentWriter;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.server.Client;
import github.log4jexploit.crunchytoast.strategy.Strategy;
import github.log4jexploit.crunchytoast.strategy.StrategyRequestReceiveImpl;
import github.log4jexploit.crunchytoast.strategy.StrategyRequestSendImpl;
import org.jetbrains.annotations.NotNull;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;


public final class HttpRequestImpl extends HttpMessageImpl implements HttpRequest {

    private Map<String, String> parameters;
    private Http.RequestType requestType;
    private Strategy.Request strategy;
    private String resourcePath;
    private String destination;


    public HttpRequestImpl() {
        this.requestType = Http.RequestType.GET;
        this.parameters = new HashMap<>();
        this.resourcePath = "/";
        this.destination = "";
    }


    @Override
    public IBodyContentReader receive(Client client) {
        this.client = client;
        this.strategy = new StrategyRequestReceiveImpl();
        this.strategy.initialize(this.client, this);
        this.strategy.execute();

        if(this.requestType != Http.RequestType.HEAD) {
            return super.receive(client);
        }

        return new BodyContentEmpty();
    }

    @Override
    public IBodyContentWriter send(Client client) {
        this.client = client;
        this.prepareSend();
        this.strategy = new StrategyRequestSendImpl();
        this.strategy.initialize(this.client, this);
        this.strategy.execute();
        return super.send(this.client);
    }

    private void prepareSend() {
        if(this.getHost() == null) {
            this.setHost(this.getClient().getAddress());
        }
    }

    @Override
    public void setRequestURI(String uri) {
        Pair<String, Map<String, String>> result = this.parseURI(uri);
        this.resourcePath = result.getValueA();
        this.parameters = result.getValueB();
    }

    @Override
    public Http.RequestType getRequestType() {
        return requestType;
    }

    @Override
    public void setRequestType(Http.RequestType requestType) {
        this.requestType = requestType;
    }

    @Override
    public String getRequestURI() {
        return this.constructURI(resourcePath, parameters);
    }

    @Override
    public Map<String, String> getParameters() {
        return this.parameters;
    }

    @Override
    public String getResourcePath() {
        return this.resourcePath;
    }

    @Override
    public void setResourcePath(@NotNull String resourcePath) {
        Objects.requireNonNull(resourcePath, "Resource path cannot be null!");
        if(resourcePath.isBlank()) {
            throw new IllegalArgumentException("Resource path cannot be empty or blank!");
        }
        resourcePath = resourcePath.trim();
        if(!resourcePath.startsWith("/")) {
            throw new IllegalArgumentException("Resource path must start with a slash!");
        }
        this.resourcePath = resourcePath;
    }

    @Override
    public void setParameters(Map<String, String> parameters) {
        this.parameters = new HashMap<>(parameters);
    }

    @Override
    public String getRequestDestination() {
        return this.destination;
    }

    @Override
    public void setDestination(String destination) {
        this.destination = destination;
    }

    @Override
    public HttpRequestImpl clone() {
        HttpRequestImpl clone = new HttpRequestImpl();
        clone.setDestination(this.destination);
        clone.setRequestType(this.requestType);
        clone.setParameters(new HashMap<>(this.parameters));
        clone.setResourcePath(this.resourcePath);
        clone.setContent(this.resource);

        clone.getHeaders().putAll(this.headers);
        clone.getCustomHeaders().putAll(this.customHeaders);
        clone.getTrailers().putAll(this.trailers);
        clone.getCustomTrailers().putAll(this.customTrailers);
        return clone;
    }

    public String constructURI(String resourcePath, Map<String, String> parameters) {
        StringBuilder builder = new StringBuilder(Objects.requireNonNull(resourcePath));

        if(Objects.requireNonNull(parameters).isEmpty())
            return builder.toString();

        builder.append("?");

        for(Map.Entry<String, String> entry : parameters.entrySet()) {
            builder.append(entry.getKey())
                    .append("=")
                    .append(entry.getValue())
                    .append("&");
        }

        builder.deleteCharAt(builder.length() - 1);
        return builder.toString();
    }

    public Pair<String, Map<String, String>> parseURI(String uri) {
        Objects.requireNonNull(uri);
        uri = uri.trim();

        int index = uri.indexOf('?');
        String resourcePath = uri.substring(0, index == -1 ? uri.length() : index);

        if(index == -1) {
            return new Pair<>(resourcePath, new HashMap<>());
        }

        Map<String, String> result = parseParameters(
                uri.substring(index + 1)
        );

        return new Pair<>(resourcePath, result);
    }

    public Map<String, String> parseParameters(String parameters) {
        if(Objects.requireNonNull(parameters).isEmpty()) {
            throw new HttpProtocolException("Invalid uri parameters: Text is empty!");
        }

        Map<String, String> result = new HashMap<>();
        StringBuilder buffer = new StringBuilder(parameters);
        int index;

        while(!buffer.isEmpty()) {
            index = buffer.indexOf("&");

            String keyAndValue = buffer.substring(0, index == -1 ? buffer.length() : index);
            buffer.delete(0, index == -1 ? buffer.length() : index + 1);

            System.out.println(buffer);
            Pair<String, String> parameter = parseParameter(keyAndValue);
            result.put(parameter.getValueA(), parameter.getValueB());
        }

        return result;
    }

    public Pair<String, String> parseParameter(String parameter) {
        Objects.requireNonNull(parameter);

        if(parameter.trim().isEmpty())
            throw new HttpProtocolException("Invalid uri parameter: Text is empty!");

        int index = parameter.indexOf('=');
        if(index == -1)
            throw new HttpProtocolException("Invalid uri parameter: Does not consist of key value pair!");

        String key = parameter.substring(0, index);
        String value = parameter.substring(index + 1);
        return new Pair<>(key, value);
    }
}
