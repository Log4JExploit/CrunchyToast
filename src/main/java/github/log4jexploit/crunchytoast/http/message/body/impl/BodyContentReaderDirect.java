/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOReader;
import github.log4jexploit.crunchytoast.resource.Resource;
import github.log4jexploit.crunchytoast.server.Client;

import java.util.function.Consumer;

public class BodyContentReaderDirect extends BodyContentBase implements IBodyContentReader {

    private final UncheckedIOReader reader;
    private final long contentLength;


    public BodyContentReaderDirect(long contentLength, Consumer<Resource> callback, Http.ContentType contentType, Client client) {
        super(callback, contentType, client);
        this.reader = new UncheckedIOReader(getInputStream());
        this.contentLength = contentLength;
    }

    public void readAll() {
        while(!isFinished())
            read(1024 * 16);
    }

    public void read() {
        read(1);
    }

    public void read(long count) {
        if(super.isFinished())
            return;

        if(super.counter.get() + count > contentLength)
            count = this.contentLength - super.counter.get();

        byte[] buf = new byte[(int) count];
        int length = reader.readNBytes(buf, 0, (int) count);
        super.counter.addAndGet(length);

        if(length != count)
            super.buffer.write(buf, 0, length);
        else
            super.buffer.write(buf);

        if(super.counter.get() >= this.contentLength) {
            markAsDone();
        }
    }

    public int read(byte[] buffer, int count) {
        if(isFinished())
            return 0;

        if(super.counter.get() + count > this.contentLength)
            count = (int) Math.min(this.contentLength - super.counter.get(), Integer.MAX_VALUE);

        count = this.reader.readNBytes(buffer, 0, count);
        super.counter.addAndGet(count);

        this.buffer.write(buffer, 0, count);
        return count;
    }

    @Override
    public void onFlushRemaining() {
        readAll();
    }
}
