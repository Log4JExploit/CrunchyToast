/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.message.body.impl;

import github.log4jexploit.crunchytoast.http.endpoint.HttpResource;
import github.log4jexploit.crunchytoast.http.endpoint.HttpResourceSplintered;
import github.log4jexploit.crunchytoast.http.endpoint.HttpResourceStream;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.inf.HttpMessage;
import github.log4jexploit.crunchytoast.http.message.inf.Strategy;
import github.log4jexploit.crunchytoast.http.util.DecodingStream;
import github.log4jexploit.crunchytoast.http.util.Http;
import github.log4jexploit.crunchytoast.http.util.UncheckedIOReader;

import java.io.InputStream;

public class BodyContentReaderDirect implements IBodyContentReader {

    private final Strategy.Message strategy;
    private final Http.Encoding[] encodings;
    private final UncheckedIOReader reader;
    private final long finalLength;

    private HttpResource content;
    private boolean decoded;
    private int counter;


    public BodyContentReaderDirect(HttpMessage message, Strategy.Message strategy) {
        this.reader = new UncheckedIOReader(message.getClient().getInputStream());
        this.encodings = message.getContentEncodings();
        this.content = new HttpResourceSplintered(message.getContentType());
        this.finalLength = message.getContentLength();
        this.strategy = strategy;
        this.counter = 0;
    }

    public void readAll() {
        while(this.counter < finalLength)
            read(1024);
    }

    public void read() {
        read(1);
    }

    public void read(long count) {
        if(decoded || counter >= finalLength)
            return;

        if(counter + count > finalLength)
            count = finalLength - this.counter;

        byte[] buf = new byte[(int) count];
        int len = reader.readNBytes(buf, 0, (int) count);
        counter += len;

        if(len != count)
            ((HttpResourceSplintered)this.content).write(buf, 0, len);
        else
            ((HttpResourceSplintered)this.content).write(buf);

        if(this.counter >= finalLength)
            this.strategy.executeTrailers();
    }

    public int readRaw(byte[] buffer, int count) {
        if(counter >= finalLength)
            return 0;

        if(count + counter > finalLength)
            count = (int) Math.min(finalLength - counter, Integer.MAX_VALUE);

        count = reader.readNBytes(buffer, 0, count);
        counter += count;

        return count;
    }

    public int skipBytesRaw(int count) {
        if(counter >= finalLength)
            return 0;

        if(count + counter > finalLength)
            count = (int) Math.min(finalLength - counter, Integer.MAX_VALUE);

        int skipped = (int) reader.skip(count);
        counter += skipped;
        return skipped;
    }

    @Override
    public void decode() {
        if(decoded || this.counter < finalLength)
            return;

        if(this.counter > this.content.getSize())
            return;

        DecodingStream decodingInputStream = new DecodingStream(encodings, this.content.getDataAsStream());
        this.content = new HttpResourceStream(decodingInputStream, this.content.getContentType());
        this.decoded = true;
    }

    public HttpResource getDecoded() {
        onFlushRemaining();
        return this.content;
    }

    private long getSize() {
        return this.content.getSize();
    }

    @Override
    public void onFlushRemaining() {
        readAll();
        decode();
    }

    @Override
    public Http.Encoding[] getEncodings() {
        return this.encodings;
    }

    @Override
    public InputStream getInputStream() {
        return this.reader.getInputStream();
    }

    @Override
    public UncheckedIOReader getReader() {
        return this.reader;
    }

    public long getContentLength() {
        return getSize();
    }

    public int getBytesRead() {
        return counter;
    }
}
