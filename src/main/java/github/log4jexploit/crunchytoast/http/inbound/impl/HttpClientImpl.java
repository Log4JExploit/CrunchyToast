/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.inbound.impl;

import github.log4jexploit.crunchytoast.exceptions.ConnectionClosedException;
import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.CommonText;
import github.log4jexploit.crunchytoast.general.Pair;
import github.log4jexploit.crunchytoast.general.ScheduledTask;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpClient;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;
import github.log4jexploit.crunchytoast.http.provider.PostProcessor;
import github.log4jexploit.crunchytoast.http.provider.Provider;
import github.log4jexploit.crunchytoast.http.provider.ProviderManager;
import github.log4jexploit.crunchytoast.http.util.HttpSecurityPolicy;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UncheckedIOException;
import java.net.Socket;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicReference;

public final class HttpClientImpl implements HttpClient {

    private final AtomicReference<Optional<HttpResponse>> reference;
    private final ScheduledTask task;
    private HttpRequest request;

    private final Socket socket;
    private final HttpServer server;

    private InputStream in;
    private OutputStream out;

    private Runnable closeHook;
    private Thread handler;
    private boolean alive;


    public HttpClientImpl(Socket socket, HttpServer server) {
        this.socket = socket;
        this.server = server;
        this.closeHook = this::closeSocket;
        this.reference = new AtomicReference<>();
        this.task = new ScheduledTask(() -> onTaskExecute(this.request, reference));
    }

    private void onStart() {
        try(Socket socket = this.socket) {
            in = socket.getInputStream();
            out = socket.getOutputStream();
            this.alive = true;

            server.onConnect(this);

            while (this.alive) {
                this.spin();
            }
        } catch (Exception e) {
            this.onError(e);
        } finally {
            this.closeSelf();
        }
    }

    private void onError(Exception e) {
        server.getLogger().debug(e.getMessage());
        server.getLogger().debugError(e);

        if(
                e instanceof HttpProtocolException ||
                e instanceof IOException ||
                e instanceof UncheckedIOException ||
                e instanceof ConnectionClosedException
        ) {
            return;
        }

        server.getLogger().warnError(e);
    }

    /**
     * Handle incoming requests
     */
    private void spin() {
        this.reference.set(Optional.empty());
        this.request = HttpRequest.createDefault();

        final IBodyContentReader bodyContentReader = request.receive(this);

        this.task.setDone(false);
        this.server.getWorkerGroup().add(task);

        if(!task.isDone()) {
            task.getLock().waitForWake();
        }

        reference.get().ifPresentOrElse(
                (response) -> this.sendResponse(response, bodyContentReader),
                this::closeSelf
        );
    }

    private void onTaskExecute(HttpRequest request, AtomicReference<Optional<HttpResponse>> reference) {
        this.server.getLogger().debug(CommonText.HTTP_DEBUG_REQUEST.apply(request));

        for(Provider preProcessor : this.server.getPreProcessors()) {
            Optional<HttpResponse> result = preProcessor.apply(request);
            if(result.isPresent()) {
                reference.set(result);
                return;
            }
        }

        reference.set(HttpClientImpl.this.getProviderManager().apply(request));
        Pair<HttpRequest, Optional<HttpResponse>> requestAndResponsePair = new Pair<>(request, reference.get());

        for(PostProcessor postProcessor : this.server.getPostProcessors()) {
            Optional<HttpResponse> result = postProcessor.apply(requestAndResponsePair);
            if(result.isPresent()) {
                reference.set(result);
                return;
            }
        }
    }

    private void sendResponse(HttpResponse response, IBodyContentReader reader) {
        if(!alive || response == null)
            throw new ConnectionClosedException();

        reader.onFlushRemaining();

        if(response.isSending() && !response.getClient().equals(this)) {
            response = (HttpResponse) response.clone();
        }

        if(!response.isSending()) {
            response.send(this).onFlushRemaining();
        }

        if (this.server.getSecurityPolicy().isKeepAliveByDefault() && response.isKeepAlive()) {
            return;
        }

        throw new ConnectionClosedException();
    }

    @Override
    public void start() {
        if(this.alive) {
            return;
        }

        this.handler = new Thread(this::onStart);
        this.handler.start();
    }

    @Override
    public void waitForClose() throws InterruptedException {
        this.handler.join();
    }

    @Override
    public Socket free() {
        this.closeHook = () -> {};
        this.close();
        return this.socket;
    }

    @Override
    public void close() {
        if(!alive)
            return;
        this.closeSelf();
        this.handler.interrupt();
    }

    private void closeSelf() {
        this.alive = false;
        this.closeHook.run();
        this.server.getWorkerGroup().add(
            new ScheduledTask(
                () -> this.server.onDisconnect(this)
            )
        );
    }

    private void closeSocket() {
        try {
            this.socket.close();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @Override
    public boolean isAlive() {
        return alive;
    }

    @Override
    public HttpServer getServer() {
        return server;
    }

    @Override
    public ProviderManager getProviderManager() {
        return server.getProviderManager();
    }

    public String getAddress() {
        return socket.getInetAddress().getHostAddress();
    }

    public String getAddressResolved() {
        return socket.getInetAddress().getHostAddress();
    }

    @Override
    public InputStream getInputStream() {
        return this.in;
    }

    @Override
    public HttpSecurityPolicy getSecurityPolicy() {
        return this.server.getSecurityPolicy();
    }

    @Override
    public OutputStream getOutputStream() {
        return this.out;
    }
}
