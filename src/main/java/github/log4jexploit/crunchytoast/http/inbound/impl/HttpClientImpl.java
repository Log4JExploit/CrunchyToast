/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.inbound.impl;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.http.endpoint.EndpointManager;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpClient;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpEventHandler;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpServer;
import github.log4jexploit.crunchytoast.http.message.body.inf.IBodyContentReader;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UncheckedIOException;
import java.net.Socket;

public final class HttpClientImpl implements HttpClient {

    private final Socket socket;
    private final HttpEventHandler eventHandler;
    private final HttpServer server;

    private InputStream in;
    private OutputStream out;

    private Thread handler;
    private boolean alive;
    private boolean free;

    public HttpClientImpl(Socket socket, HttpServer server, HttpEventHandler eventHandler) {
        this.socket = socket;
        this.server = server;
        this.eventHandler = eventHandler;
        this.free = false;
    }


    @Override
    public void initialize() {
        this.handler = new Thread(() -> {
            try {
                in = socket.getInputStream();
                out = socket.getOutputStream();

                this.alive = true;

                eventHandler.onConnect(this);

                do {
                    HttpRequest request = HttpRequest.createDefault();
                    IBodyContentReader bodyContentReader = request.receive(this);

                    server.getLogger().debug(this.getIP()+" "+request.getRequestType().toString());

                    EndpointManager rm = HttpClientImpl.this.getEndpointManager();
                    HttpResponse response = rm.delegateRequest(request);

                    if(!response.isSent())
                        response.send(this);

                    // Flush remaining content
                    bodyContentReader.onFlushRemaining();
                    response.getBodyContentHandler().onFlushRemaining();

                    if (!server.isKeepAlive() || !response.isKeepAlive()) {
                        break;
                    }
                } while (this.alive);
            } catch (HttpProtocolException e) {
                server.getLogger().info("Http protocol violation: "+getIP()+": "+e.getMessage());
            } catch (UncheckedIOException | IOException ignored) {
                server.getLogger().info("Connection terminated, IO/Error: "+getIP());
            } catch (Exception e) {
                server.getLogger().debugError(e);
            }

            try {
                if(!free)
                    socket.close();
            } catch (IOException e) {
                server.getLogger().alert("Couldn't close socket for "+getIP()+": "+e.getMessage());
                server.getLogger().debugError(e);
            } finally {
                eventHandler.onDisconnect(this);
            }
        });
    }

    @Override
    public void start() {
        if(handler != null && handler.isAlive() && !handler.isInterrupted()) {
            return;
        }
        this.initialize();
        this.handler.start();
    }

    @Override
    public void waitForClose() throws InterruptedException {
        this.handler.join();
    }

    @Override
    public Socket free() {
        this.free = true;
        this.alive = false;
        return this.socket;
    }

    @Override
    public void close() {
        if(!this.isAlive() && !this.handler.isAlive())
            return;
        try {
            this.alive = false;
            this.socket.close();
            this.handler.interrupt();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    @Override
    public boolean isAlive() {
        return alive;
    }

    @Override
    public HttpServer getServer() {
        return server;
    }

    @Override
    public EndpointManager getEndpointManager() {
        return server.getEndpointManager();
    }

    @Override
    public HttpEventHandler getEventHandler() {
        return this.eventHandler;
    }

    public String getIP() {
        return socket.getInetAddress().getHostAddress();
    }

    @Override
    public InputStream getInputStream() {
        return this.in;
    }

    @Override
    public OutputStream getOutputStream() {
        return this.out;
    }
}
