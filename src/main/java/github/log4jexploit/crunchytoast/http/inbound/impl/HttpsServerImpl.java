/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.inbound.impl;

import github.log4jexploit.crunchytoast.cert.CertManager;
import github.log4jexploit.crunchytoast.cert.CertManagerImpl;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;

public final class HttpsServerImpl extends HttpServer {

    private final CertManager certManager;

    public HttpsServerImpl(int port) {
        this(port, "127.0.0.1");
    }

    public HttpsServerImpl(int port, String bindingIP) {
        super(port, bindingIP);
        this.certManager = new CertManagerImpl();
    }

    /**
     * Prints the credits and advice for handling<br>
     * the certificate and key files
     */
    private void printDebug() {
        logger.debug("--- SECURITY INFO ---");
        logger.debug("TLS:");
        logger.debug("TLS Version: TLSv1.3");
        logger.debug("Supported Ciphers: TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256");
        logger.debug("Supported Application Protocols: Http/1.1");
        logger.debug("Endpoint Identification Algorithm: HTTPS");
        logger.debug("");
        logger.debug("Certificates: ");
        logger.debug("The 'certificates' folder has to contain two files: 'cert.pem' and 'key.pem'");
        logger.debug("The 'key.pem' file has to be formatted as PKCS8, unencrypted, containing the private key");
        logger.debug("The 'cert.pem' file has to be a X509 certificate and needs to be formatted as PEM");
        logger.debug("");
        logger.debug("Credit:");
        logger.debug("Author: Log4JExploit");
        logger.debug("Github Repository: https://github.com/Log4JExploit/CrunchyToast/");
        logger.debug("");
        logger.debug("--- SECURITY INFO ---");
    }

    /**
     * Initializes the certificate factory and generates a {@link ServerSocket}
     * @return the newly created {@link ServerSocket}
     * @throws IOException Is thrown when binding to a specific port or address fails
     */
    void createServerSocket() throws IOException {
        this.certManager.createFactory();

        if(this.bindingIP == null) {
            this.serverSocket = this.certManager.getServerSocketFactory().createServerSocket(port);
        } else {
            InetAddress address = new InetSocketAddress(this.bindingIP, this.port).getAddress();
            this.serverSocket = this.certManager.getServerSocketFactory().createServerSocket(this.port,-1, address);
        }

        printDebug();
    }
}
