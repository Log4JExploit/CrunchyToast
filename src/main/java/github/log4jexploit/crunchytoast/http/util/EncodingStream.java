/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.GZIPOutputStream;

public class EncodingStream extends OutputStream {

    private final List<FilterOutputStream> streams;
    private final Http.Encoding[] encodings;
    private final OutputStream encodedStream;
    private FilterOutputStream filterStack;

    public EncodingStream(Http.Encoding[] encodings, OutputStream encodedStream) {
        this.encodedStream = encodedStream;
        this.encodings = encodings;
        this.streams = new ArrayList<>();
        try {
            init();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    private void init() throws IOException {
        OutputStream stream = this.encodedStream;
        List<Http.Encoding> encodingList = new ArrayList<>(List.of(encodings));
        Collections.reverse(encodingList);

        for(Http.Encoding encoding : encodingList) {
            stream =  switch (encoding) {
                case GZIP: yield new GZIPOutputStream(stream);
                case DEFLATE: yield new DeflaterOutputStream(stream);
                case BR:
                case BASE64:
                    throw new IOException("Unsupported encoding: "+ Http.Encoding.BASE64);
            };
            this.filterStack = (FilterOutputStream) stream;
            streams.add(filterStack);
        }
    }

    @Override
    public void write(int i) throws IOException {
        filterStack.write(i);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        filterStack.write(b, off, len);
    }

    @Override
    public void write(byte[] b) throws IOException {
        filterStack.write(b);
    }

    @Override
    public void close() throws IOException {
        for(FilterOutputStream stream : streams) {
            stream.close();
        }
    }
}
