/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import java.io.*;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.GZIPOutputStream;

// Coded by Zadex at 24/10/2022
public final class EncodingInputStream {

    private final ByteArrayInputStream inputStream;
    private final byte[] bytes;

    public EncodingInputStream(String[] encodings, byte[] data) {
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            buffer.write(data);
            buffer.flush();

            for (String encoding : encodings) {
                byte[] content = buffer.toByteArray();
                buffer.reset();
                OutputStream stream = switch (encoding) {
                    case "gzip" -> new GZIPOutputStream(buffer, true);
                    case "deflate" -> new DeflaterOutputStream(buffer, true);
                    case "chunked" -> new BufferedOutputStream(buffer);
                    default -> throw new RuntimeException("Unsupported compression algorithm!");
                };
                stream.write(content);
                stream.flush();
                stream.close();

                buffer.flush();
            }
            this.bytes = buffer.toByteArray();
            this.inputStream = new ByteArrayInputStream(bytes);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public byte[] getBytes() {
        return this.bytes;
    }

    public byte[] readAllBytes() {
        return this.inputStream.readAllBytes();
    }

    public int read() {
        return this.inputStream.read();
    }
}
