/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import github.log4jexploit.crunchytoast.general.Parseable;

import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;


public final class Http {

    public static class Date {
        public static String now() {
            return at(System.currentTimeMillis());
        }

        public static String at(long time) {
            return new SimpleDateFormat("E, d MMM yyyy hh:mm:ss Z")
                    .format(new java.util.Date(time));
        }
    }

    public enum CountryCode implements Parseable {
        AF("Afghanistan"),
        AX("Åland Islands"),
        AL("Albania"),
        DZ("Algeria"),
        AS("American Samoa"),
        AD("Andorra"),
        AO("Angola"),
        AI("Anguilla"),
        AQ("Antarctica"),
        AG("Antigua and Barbuda"),
        AR("Argentina"),
        AM("Armenia"),
        AW("Aruba"),
        AU("Australia"),
        AT("Austria"),
        AZ("Azerbaijan"),
        BH("Bahrain"),
        BS("Bahamas"),
        BD("Bangladesh"),
        BB("Barbados"),
        BY("Belarus"),
        BE("Belgium"),
        BZ("Belize"),
        BJ("Benin"),
        BM("Bermuda"),
        BT("Bhutan"),
        BO("Bolivia, Plurinational State of Bolivia"),
        BQ("Bonaire, Sint Eustatius and Saba"),
        BA("Bosnia and Herzegovina"),
        BW("Botswana"),
        BV("Bouvet Island"),
        BR("Brazil"),
        IO("British Indian Ocean Territory"),
        BN("Brunei Darussalam"),
        BG("Bulgaria"),
        BF("Burkina Faso"),
        BI("Burundi"),
        KH("Cambodia"),
        CM("Cameroon"),
        CA("Canada"),
        CV("Cape Verde"),
        KY("Cayman Islands"),
        CF("Central African Republic"),
        TD("Chad"),
        CL("Chile"),
        CN("China"),
        CX("Christmas Island"),
        CC("Cocos (Keeling) Islands"),
        CO("Colombia"),
        KM("Comoros"),
        CG("Congo"),
        CD("Congo, the Democratic Republic of the Congo"),
        CK("Cook Islands"),
        CR("Costa Rica"),
        CI("Côte d'Ivoire"),
        HR("Croatia"),
        CU("Cuba"),
        CW("Curaçao"),
        CY("Cyprus"),
        CZ("Czech Republic"),
        DK("Denmark"),
        DJ("Djibouti"),
        DM("Dominica"),
        DO("Dominican Republic"),
        EC("Ecuador"),
        EG("Egypt"),
        SV("El Salvador"),
        GQ("Equatorial Guinea"),
        ER("Eritrea"),
        EE("Estonia"),
        ET("Ethiopia"),
        FK("Falkland Islands (Malvinas)"),
        FO("Faroe Islands"),
        FJ("Fiji"),
        FI("Finland"),
        FR("France"),
        GF("French Guiana"),
        PF("French Polynesia"),
        TF("French Southern Territories"),
        GA("Gabon"),
        GM("Gambia"),
        GE("Georgia"),
        DE("Germany"),
        GH("Ghana"),
        GI("Gibraltar"),
        GR("Greece"),
        GL("Greenland"),
        GD("Grenada"),
        GP("Guadeloupe"),
        GU("Guam"),
        GT("Guatemala"),
        GG("Guernsey"),
        GN("Guinea"),
        GW("Guinea-Bissau"),
        GY("Guyana"),
        HT("Haiti"),
        HM("Heard Island and McDonald Islands"),
        VA("Holy See (Vatican City State)"),
        HN("Honduras"),
        HK("Hong Kong"),
        HU("Hungary"),
        IS("Iceland"),
        IN("India"),
        ID("Indonesia"),
        IR("Iran, Islamic Republic of Iran"),
        IQ("Iraq"),
        IE("Ireland"),
        IM("Isle of Man"),
        IL("Israel"),
        IT("Italy"),
        JM("Jamaica"),
        JP("Japan"),
        JE("Jersey"),
        JO("Jordan"),
        KZ("Kazakhstan"),
        KE("Kenya"),
        KI("Kiribati"),
        KP("Korea, Democratic People's Republic of Korea"),
        KR("Korea, Republic of Korea"),
        KW("Kuwait"),
        KG("Kyrgyzstan"),
        LA("Lao People's Democratic Republic"),
        LV("Latvia"),
        LB("Lebanon"),
        LS("Lesotho"),
        LR("Liberia"),
        LY("Libya"),
        LI("Liechtenstein"),
        LT("Lithuania"),
        LU("Luxembourg"),
        MO("Macao"),
        MK("Macedonia, the Former Yugoslav Republic of Macedonia"),
        MG("Madagascar"),
        MW("Malawi"),
        MY("Malaysia"),
        MV("Maldives"),
        ML("Mali"),
        MT("Malta"),
        MH("Marshall Islands"),
        MQ("Martinique"),
        MR("Mauritania"),
        MU("Mauritius"),
        YT("Mayotte"),
        MX("Mexico"),
        FM("Micronesia, Federated States of Micronesia"),
        MD("Moldova, Republic of Moldova"),
        MC("Monaco"),
        MN("Mongolia"),
        ME("Montenegro"),
        MS("Montserrat"),
        MA("Morocco"),
        MZ("Mozambique"),
        MM("Myanmar"),
        NA("Namibia"),
        NR("Nauru"),
        NP("Nepal"),
        NL("Netherlands"),
        NC("New Caledonia"),
        NZ("New Zealand"),
        NI("Nicaragua"),
        NE("Niger"),
        NG("Nigeria"),
        NU("Niue"),
        NF("Norfolk Island"),
        MP("Northern Mariana Islands"),
        NO("Norway"),
        OM("Oman"),
        PK("Pakistan"),
        PW("Palau"),
        PS("Palestine, State of Palestine"),
        PA("Panama"),
        PG("Papua New Guinea"),
        PY("Paraguay"),
        PE("Peru"),
        PH("Philippines"),
        PN("Pitcairn"),
        PL("Poland"),
        PT("Portugal"),
        PR("Puerto Rico"),
        QA("Qatar"),
        RE("Réunion"),
        RO("Romania"),
        RU("Russian Federation"),
        RW("Rwanda"),
        BL("Saint Barthélemy"),
        SH("Saint Helena, Ascension and Tristan da Cunha"),
        KN("Saint Kitts and Nevis"),
        LC("Saint Lucia"),
        MF("Saint Martin (French part)"),
        PM("Saint Pierre and Miquelon"),
        VC("Saint Vincent and the Grenadines"),
        WS("Samoa"),
        SM("San Marino"),
        ST("Sao Tome and Principe"),
        SA("Saudi Arabia"),
        SN("Senegal"),
        RS("Serbia"),
        SC("Seychelles"),
        SL("Sierra Leone"),
        SG("Singapore"),
        SX("Sint Maarten (Dutch part)"),
        SK("Slovakia"),
        SI("Slovenia"),
        SB("Solomon Islands"),
        SO("Somalia"),
        ZA("South Africa"),
        GS("South Georgia and the South Sandwich Islands"),
        SS("South Sudan"),
        ES("Spain"),
        LK("Sri Lanka"),
        SD("Sudan"),
        SR("Suriname"),
        SJ("Svalbard and Jan Mayen"),
        SZ("Swaziland"),
        SE("Sweden"),
        CH("Switzerland"),
        SY("Syrian Arab Republic"),
        TW("Taiwan, Province of China"),
        TJ("Tajikistan"),
        TZ("Tanzania, United Republic of Tanzania"),
        TH("Thailand"),
        TL("Timor-Leste"),
        TG("Togo"),
        TK("Tokelau"),
        TO("Tonga"),
        TT("Trinidad and Tobago"),
        TN("Tunisia"),
        TR("Turkey"),
        TM("Turkmenistan"),
        TC("Turks and Caicos Islands"),
        TV("Tuvalu"),
        UG("Uganda"),
        UA("Ukraine"),
        AE("United Arab Emirates"),
        GB("United Kingdom"),
        US("United States"),
        UM("United States Minor Outlying Islands"),
        UY("Uruguay"),
        UZ("Uzbekistan"),
        VU("Vanuatu"),
        VE("Venezuela, Bolivarian Republic of Venezuela"),
        VN("Viet Nam"),
        VG("Virgin Islands, British"),
        VI("Virgin Islands, U.S."),
        WF("Wallis and Futuna"),
        EH("Western Sahara"),
        YE("Yemen"),
        ZM("Zambia"),
        ZW("Zimbabwe");

        private final String country;

        CountryCode(String country) {
            this.country = country;
        }

        public String getCountry() {
            return country;
        }

        @Override
        public CountryCode byString(String text) {
            for(CountryCode countryCode : values()) {
                if(text.toLowerCase().contains(countryCode.toString().toLowerCase())) {
                    return countryCode;
                }
            }
            return null;
        }

        @Override
        public String toString() {
            return this.country;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum Language implements Parseable {
        AF("af", "Afrikaans"),
        AF_ZA("af-ZA", "Afrikaans (South Africa)"),
        AR("ar", "Arabic"),
        AR_AE("ar-AE", "Arabic (U.A.E.)"),
        AR_BH("ar-BH", "Arabic (Bahrain)"),
        AR_DZ("ar-DZ", "Arabic (Algeria)"),
        AR_EG("ar-EG", "Arabic (Egypt)"),
        AR_IQ("ar-IQ", "Arabic (Iraq)"),
        AR_JO("ar-JO", "Arabic (Jordan)"),
        AR_KW("ar-KW", "Arabic (Kuwait)"),
        AR_LB("ar-LB", "Arabic (Lebanon)"),
        AR_LY("ar-LY", "Arabic (Libya)"),
        AR_MA("ar-MA", "Arabic (Morocco)"),
        AR_OM("ar-OM", "Arabic (Oman)"),
        AR_QA("ar-QA", "Arabic (Qatar)"),
        AR_SA("ar-SA", "Arabic (Saudi Arabia)"),
        AR_SY("ar-SY", "Arabic (Syria)"),
        AR_TN("ar-TN", "Arabic (Tunisia)"),
        AR_YE("ar-YE", "Arabic (Yemen)"),
        AZ("az", "Azeri (Latin)"),
        AZ_AZ("az-AZ", "Azeri (Latin) (Azerbaijan)"),
        AZ_AZ_1("az-AZ", "Azeri (Cyrillic) (Azerbaijan)"),
        BE("be", "Belarusian"),
        BE_BY("be-BY", "Belarusian (Belarus)"),
        BG("bg", "Bulgarian"),
        BG_BG("bg-BG", "Bulgarian (Bulgaria)"),
        BS_BA("bs-BA", "Bosnian (Bosnia and Herzegovina)"),
        CA("ca", "Catalan"),
        CA_ES("ca-ES", "Catalan (Spain)"),
        CS("cs", "Czech"),
        CS_CZ("cs-CZ", "Czech (Czech Republic)"),
        CY("cy", "Welsh"),
        CY_GB("cy-GB", "Welsh (United Kingdom)"),
        DA("da", "Danish"),
        DA_DK("da-DK", "Danish (Denmark)"),
        DE("de", "German"),
        DE_AT("de-AT", "German (Austria)"),
        DE_CH("de-CH", "German (Switzerland)"),
        DE_DE("de-DE", "German (Germany)"),
        DE_LI("de-LI", "German (Liechtenstein)"),
        DE_LU("de-LU", "German (Luxembourg)"),
        DV("dv", "Divehi"),
        DV_MV("dv-MV", "Divehi (Maldives)"),
        EL("el", "Greek"),
        EL_GR("el-GR", "Greek (Greece)"),
        EN("en", "English"),
        EN_AU("en-AU", "English (Australia)"),
        EN_BZ("en-BZ", "English (Belize)"),
        EN_CA("en-CA", "English (Canada)"),
        EN_CB("en-CB", "English (Caribbean)"),
        EN_GB("en-GB", "English (United Kingdom)"),
        EN_IE("en-IE", "English (Ireland)"),
        EN_JM("en-JM", "English (Jamaica)"),
        EN_NZ("en-NZ", "English (New Zealand)"),
        EN_PH("en-PH", "English (Republic of the Philippines)"),
        EN_TT("en-TT", "English (Trinidad and Tobago)"),
        EN_US("en-US", "English (United States)"),
        EN_ZA("en-ZA", "English (South Africa)"),
        EN_ZW("en-ZW", "English (Zimbabwe)"),
        EO("eo", "Esperanto"),
        ES("es", "Spanish"),
        ES_AR("es-AR", "Spanish (Argentina)"),
        ES_BO("es-BO", "Spanish (Bolivia)"),
        ES_CL("es-CL", "Spanish (Chile)"),
        ES_CO("es-CO", "Spanish (Colombia)"),
        ES_CR("es-CR", "Spanish (Costa Rica)"),
        ES_DO("es-DO", "Spanish (Dominican Republic)"),
        ES_EC("es-EC", "Spanish (Ecuador)"),
        ES_ES("es-ES", "Spanish (Castilian)"),
        ES_ES_1("es-ES", "Spanish (Spain)"),
        ES_GT("es-GT", "Spanish (Guatemala)"),
        ES_HN("es-HN", "Spanish (Honduras)"),
        ES_MX("es-MX", "Spanish (Mexico)"),
        ES_NI("es-NI", "Spanish (Nicaragua)"),
        ES_PA("es-PA", "Spanish (Panama)"),
        ES_PE("es-PE", "Spanish (Peru)"),
        ES_PR("es-PR", "Spanish (Puerto Rico)"),
        ES_PY("es-PY", "Spanish (Paraguay)"),
        ES_SV("es-SV", "Spanish (El Salvador)"),
        ES_UY("es-UY", "Spanish (Uruguay)"),
        ES_VE("es-VE", "Spanish (Venezuela)"),
        ET("et", "Estonian"),
        ET_EE("et-EE", "Estonian (Estonia)"),
        EU("eu", "Basque"),
        EU_ES("eu-ES", "Basque (Spain)"),
        FA("fa", "Farsi"),
        FA_IR("fa-IR", "Farsi (Iran)"),
        FI("fi", "Finnish"),
        FI_FI("fi-FI", "Finnish (Finland)"),
        FO("fo", "Faroese"),
        FO_FO("fo-FO", "Faroese (Faroe Islands)"),
        FR("fr", "French"),
        FR_BE("fr-BE", "French (Belgium)"),
        FR_CA("fr-CA", "French (Canada)"),
        FR_CH("fr-CH", "French (Switzerland)"),
        FR_FR("fr-FR", "French (France)"),
        FR_LU("fr-LU", "French (Luxembourg)"),
        FR_MC("fr-MC", "French (Principality of Monaco)"),
        GL("gl", "Galician"),
        GL_ES("gl-ES", "Galician (Spain)"),
        GU("gu", "Gujarati"),
        GU_IN("gu-IN", "Gujarati (India)"),
        HE("he", "Hebrew"),
        HE_IL("he-IL", "Hebrew (Israel)"),
        HI("hi", "Hindi"),
        HI_IN("hi-IN", "Hindi (India)"),
        HR("hr", "Croatian"),
        HR_BA("hr-BA", "Croatian (Bosnia and Herzegovina)"),
        HR_HR("hr-HR", "Croatian (Croatia)"),
        HU("hu", "Hungarian"),
        HU_HU("hu-HU", "Hungarian (Hungary)"),
        HY("hy", "Armenian"),
        HY_AM("hy-AM", "Armenian (Armenia)"),
        ID("id", "Indonesian"),
        ID_ID("id-ID", "Indonesian (Indonesia)"),
        IS("is", "Icelandic"),
        IS_IS("is-IS", "Icelandic (Iceland)"),
        IT("it", "Italian"),
        IT_CH("it-CH", "Italian (Switzerland)"),
        IT_IT("it-IT", "Italian (Italy)"),
        JA("ja", "Japanese"),
        JA_JP("ja-JP", "Japanese (Japan)"),
        KA("ka", "Georgian"),
        KA_GE("ka-GE", "Georgian (Georgia)"),
        KK("kk", "Kazakh"),
        KK_KZ("kk-KZ", "Kazakh (Kazakhstan)"),
        KN("kn", "Kannada"),
        KN_IN("kn-IN", "Kannada (India)"),
        KO("ko", "Korean"),
        KO_KR("ko-KR", "Korean (Korea)"),
        KOK("kok", "Konkani"),
        KOK_IN("kok-IN", "Konkani (India)"),
        KY("ky", "Kyrgyz"),
        KY_KG("ky-KG", "Kyrgyz (Kyrgyzstan)"),
        LT("lt", "Lithuanian"),
        LT_LT("lt-LT", "Lithuanian (Lithuania)"),
        LV("lv", "Latvian"),
        LV_LV("lv-LV", "Latvian (Latvia)"),
        MI("mi", "Maori"),
        MI_NZ("mi-NZ", "Maori (New Zealand)"),
        MK("mk", "FYRO Macedonian"),
        MK_MK("mk-MK", "FYRO Macedonian (Former Yugoslav Republic of Macedonia)"),
        MN("mn", "Mongolian"),
        MN_MN("mn-MN", "Mongolian (Mongolia)"),
        MR("mr", "Marathi"),
        MR_IN("mr-IN", "Marathi (India)"),
        MS("ms", "Malay"),
        MS_BN("ms-BN", "Malay (Brunei Darussalam)"),
        MS_MY("ms-MY", "Malay (Malaysia)"),
        MT("mt", "Maltese"),
        MT_MT("mt-MT", "Maltese (Malta)"),
        NB("nb", "Norwegian (Bokm?l)"),
        NB_NO("nb-NO", "Norwegian (Bokm?l) (Norway)"),
        NL("nl", "Dutch"),
        NL_BE("nl-BE", "Dutch (Belgium)"),
        NL_NL("nl-NL", "Dutch (Netherlands)"),
        NN_NO("nn-NO", "Norwegian (Nynorsk) (Norway)"),
        NS("ns", "Northern Sotho"),
        NS_ZA("ns-ZA", "Northern Sotho (South Africa)"),
        PA("pa", "Punjabi"),
        PA_IN("pa-IN", "Punjabi (India)"),
        PL("pl", "Polish"),
        PL_PL("pl-PL", "Polish (Poland)"),
        PS("ps", "Pashto"),
        PS_AR("ps-AR", "Pashto (Afghanistan)"),
        PT("pt", "Portuguese"),
        PT_BR("pt-BR", "Portuguese (Brazil)"),
        PT_PT("pt-PT", "Portuguese (Portugal)"),
        QU("qu", "Quechua"),
        QU_BO("qu-BO", "Quechua (Bolivia)"),
        QU_EC("qu-EC", "Quechua (Ecuador)"),
        QU_PE("qu-PE", "Quechua (Peru)"),
        RO("ro", "Romanian"),
        RO_RO("ro-RO", "Romanian (Romania)"),
        RU("ru", "Russian"),
        RU_RU("ru-RU", "Russian (Russia)"),
        SA("sa", "Sanskrit"),
        SA_IN("sa-IN", "Sanskrit (India)"),
        SE("se", "Sami (Northern)"),
        SE_FI("se-FI", "Sami (Northern) (Finland)"),
        SE_FI_1("se-FI", "Sami (Skolt) (Finland)"),
        SE_FI_2("se-FI", "Sami (Inari) (Finland)"),
        SE_NO("se-NO", "Sami (Northern) (Norway)"),
        SE_NO_1("se-NO", "Sami (Lule) (Norway)"),
        SE_NO_2("se-NO", "Sami (Southern) (Norway)"),
        SE_SE("se-SE", "Sami (Northern) (Sweden)"),
        SE_SE_1("se-SE", "Sami (Lule) (Sweden)"),
        SE_SE_2("se-SE", "Sami (Southern) (Sweden)"),
        SK("sk", "Slovak"),
        SK_SK("sk-SK", "Slovak (Slovakia)"),
        SL("sl", "Slovenian"),
        SL_SI("sl-SI", "Slovenian (Slovenia)"),
        SQ("sq", "Albanian"),
        SQ_AL("sq-AL", "Albanian (Albania)"),
        SR_BA("sr-BA", "Serbian (Latin) (Bosnia and Herzegovina)"),
        SR_BA_1("sr-BA", "Serbian (Cyrillic) (Bosnia and Herzegovina)"),
        SR_SP("sr-SP", "Serbian (Latin) (Serbia and Montenegro)"),
        SR_SP_1("sr-SP", "Serbian (Cyrillic) (Serbia and Montenegro)"),
        SV("sv", "Swedish"),
        SV_FI("sv-FI", "Swedish (Finland)"),
        SV_SE("sv-SE", "Swedish (Sweden)"),
        SW("sw", "Swahili"),
        SW_KE("sw-KE", "Swahili (Kenya)"),
        SYR("syr", "Syriac"),
        SYR_SY("syr-SY", "Syriac (Syria)"),
        TA("ta", "Tamil"),
        TA_IN("ta-IN", "Tamil (India)"),
        TE("te", "Telugu"),
        TE_IN("te-IN", "Telugu (India)"),
        TH("th", "Thai"),
        TH_TH("th-TH", "Thai (Thailand)"),
        TL("tl", "Tagalog"),
        TL_PH("tl-PH", "Tagalog (Philippines)"),
        TN("tn", "Tswana"),
        TN_ZA("tn-ZA", "Tswana (South Africa)"),
        TR("tr", "Turkish"),
        TR_TR("tr-TR", "Turkish (Turkey)"),
        TT("tt", "Tatar"),
        TT_RU("tt-RU", "Tatar (Russia)"),
        TS("ts", "Tsonga"),
        UK("uk", "Ukrainian"),
        UK_UA("uk-UA", "Ukrainian (Ukraine)"),
        UR("ur", "Urdu"),
        UR_PK("ur-PK", "Urdu (Islamic Republic of Pakistan)"),
        UZ("uz", "Uzbek (Latin)"),
        UZ_UZ("uz-UZ", "Uzbek (Latin) (Uzbekistan)"),
        UZ_UZ_1("uz-UZ", "Uzbek (Cyrillic) (Uzbekistan)"),
        VI("vi", "Vietnamese"),
        VI_VN("vi-VN", "Vietnamese (Viet Nam)"),
        XH("xh", "Xhosa"),
        XH_ZA("xh-ZA", "Xhosa (South Africa)"),
        ZH("zh", "Chinese"),
        ZH_CN("zh-CN", "Chinese (S)"),
        ZH_HK("zh-HK", "Chinese (Hong Kong)"),
        ZH_MO("zh-MO", "Chinese (Macau)"),
        ZH_SG("zh-SG", "Chinese (Singapore)"),
        ZH_TW("zh-TW", "Chinese (T)"),
        ZU("zu", "Zulu"),
        ZU_ZA("zu-ZA", "Zulu (South Africa)");


        private final String shortName, longName;


        Language(String shortName, String longName) {
            this.shortName = shortName;
            this.longName = longName;
        }


        public String getLongName() {
            return longName;
        }

        public String getShortName() {
            return shortName;
        }

        @Override
        public Language byString(String text) {
            for(Language language : values()) {
                if(text.toLowerCase().contains(language.toString().toLowerCase())) {
                    return language;
                }
            }
            return null;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum Charset implements Parseable {
        UTF8("utf-8", StandardCharsets.UTF_8),
        UTF16("utf-16", StandardCharsets.UTF_16);

        final String name;
        public final java.nio.charset.Charset charset;

        Charset(String name, java.nio.charset.Charset charset) {
            this.name = name;
            this.charset = charset;
        }

        public java.nio.charset.Charset getCharset() {
            return charset;
        }

        public String getName() {
            return name;
        }

        @Override
        public Charset byString(String text) {
            for(Charset charset : values()) {
                if(text.toLowerCase().contains(charset.name)) {
                    return charset;
                }
            }
            return null;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum Encoding implements Parseable {
        BASE64,
        ZSTD,
        GZIP,
        BR,
        DEFLATE,
        CHUNKED;

        @Override
        public Encoding byString(String text) {
            for(Encoding encoding : values()) {
                if(text.toLowerCase().contains(encoding.toString().toLowerCase())) {
                    return encoding;
                }
            }
            return null;
        }

        @Override
        public String toString() {
            return super.toString().toLowerCase();
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum RequestType implements Parseable {
        PUT,
        DELETE,
        CONNECT,
        OPTIONS,
        TRACE,
        PATCH,
        HEAD,
        POST,
        GET;

        @Override
        public RequestType byString(String text) {
            for(RequestType requestType : values()) {
                if(text.toLowerCase().contains(requestType.toString().toLowerCase())) {
                    return requestType;
                }
            }
            return null;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum ResponseCode implements Parseable {

        CONTINUE(100, "Continue"),
        SWITCHING_PROTOCOLS(101, "Switching Protocols"),
        PROCESSING(102, "Processing"),

        OK(200, "OK"),
        CREATED(201, "Created"),
        ACCEPTED(202, "Accepted"),
        NON_AUTHORITATIVE_INFORMATION(203, "Non-Authoritative Information"),
        NO_CONTENT(204, "No Content"),
        RESET_CONTENT(205, "Reset Content"),
        PARTIAL_CONTENT(206, "Partial Content"),
        MULTI_STATUS(207, "Multi-Status"),
        ALREADY_REPORTED(208, "Already Reported"),
        IM_USED(226, "IM Used"),

        MULTIPLE_CHOICES(300, "Multiple Choices"),
        MOVED_PERMANENTLY(301, "Moved Permanently"),
        FOUND(302, "Found"),
        SEE_OTHER(303, "See Other"),
        NOT_MODIFIED(304, "Not Modified"),
        USE_PROXY(305, "Use Proxy"),
        TEMPORARY_REDIRECT(307, "Temporary Redirect"),
        PERMANENT_REDIRECT(308, "Permanent Redirect"),

        BAD_REQUEST(400, "Bad Request"),
        UNAUTHORIZED(401, "Unauthorized"),
        PAYMENT_REQUIRED(402, "Payment Required"),
        FORBIDDEN(403, "Forbidden"),
        NOT_FOUND(404, "Not Found"),
        METHOD_NOT_ALLOWED(405, "Method Not Allowed"),
        NOT_ACCEPTABLE(406, "Not Acceptable"),
        PROXY_AUTHENTICATION_REQUIRED(407, "Proxy Authentication Required"),
        REQUEST_TIMEOUT(408, "Request Timeout"),
        CONFLICT(409, "Conflict"),
        GONE(410, "Gone"),
        LENGTH_REQUIRED(411, "Length Required"),
        PRECONDITION_FAILED(412, "Precondition Failed"),
        PAYLOAD_TOO_LARGE(413, "Payload Too Large"),
        REQUEST_URI_TOO_LONG(414, "Request-URI Too Long"),
        UNSUPPORTED_MEDIA_TYPE(415, "Unsupported Media Type"),
        REQUESTED_RANGE_NOT_SATISFIABLE(416, "Requested Range Not Satisfiable"),
        EXPECTATION_FAILED(417, "Expectation Failed"),
        IM_A_TEAPOT(418, "I'm a teapot"),

        MISDIRECTED_REQUEST(421, "Misdirected Request"),
        UNPROCESSABLE_ENTITY(422, "Unprocessable Entity"),
        LOCKED(423, "Locked"),
        FAILED_DEPENDENCY(424, "Failed Dependency"),

        UPGRADE_REQUIRED(426, "Upgrade Required"),
        PRECONDITION_REQUIRED(428, "Precondition Required"),
        TOO_MANY_REQUESTS(429, "Too Many Requests"),
        REQUEST_HEADER_FIELDS_TOO_LARGE(431, "Request Header Fields Too Large"),
        CONNECTION_CLOSED_WITHOUT_RESPONSE(444, "Connection Closed Without Response"),
        UNAVAILABLE_FOR_LEGAL_REASONS(451, "Unavailable For Legal Reasons"),
        CLIENT_CLOSED_REQUEST(499, "Client Closed Request"),

        INTERNAL_SERVER_ERROR(500, "Internal Server Error"),
        NOT_IMPLEMENTED(501, "Not Implemented"),
        BAD_GATEWAY(502, "Bad Gateway"),
        SERVICE_UNAVAILABLE(503, "Service Unavailable"),
        GATEWAY_TIMEOUT(504, "Gateway Timeout"),
        HTTP_VERSION_NOT_SUPPORTED(505, "HTTP Version Not Supported"),
        VARIANT_ALSO_NEGOTIATES(506, "Variant Also Negotiates"),
        INSUFFICIENT_STORAGE(507, "Insufficient Storage"),
        LOOP_DETECTED(508, "Loop Detected"),
        NOT_EXTENDED(510, "Not Extended"),
        NETWORK_AUTHENTICATION_REQUIRED(511, "Network Authentication Required"),
        NETWORK_CONNECT_TIMEOUT_ERROR(599, "Network Connect Timeout Error");

        private final int number;
        private final String text;

        ResponseCode(int number, String text) {
            this.number = number;
            this.text = text;
        }

        @Override
        public String toString() {
            return number + " " + text;
        }

        @Override
        public Http.ResponseCode byString(String code) {
            int value = Integer.parseInt(code);
            for(Http.ResponseCode any : values()) {
                if(any.number == value)
                    return any;
            }
            return null;
        }

        public int getNumber() {
            return number;
        }

        public String getText() {
            return text;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum ContentType implements Parseable {
        A(".a", "application/octet-stream"),
        AAB(".aab", "application/x-authorware-bin"),
        AAM(".aam", "application/x-authorware-map"),
        AAS(".aas", "application/x-authorware-seg"),
        ABC(".abc", "text/vnd.abc"),
        ACGI(".acgi", "text/html"),
        AFL(".afl", "video/animaflex"),
        AI(".ai", "application/postscript"),
        AIF(".aif", "audio/aiff"),
        AIFC(".aifc", "audio/aiff"),
        AIFF(".aiff", "audio/aiff"),
        AIM(".aim", "application/x-aim"),
        AIP(".aip", "text/x-audiosoft-intra"),
        ANI(".ani", "application/x-navi-animation"),
        AOS(".aos", "application/x-nokia-9000-communicator-add-on-software"),
        APS(".aps", "application/mime"),
        ARC(".arc", "application/octet-stream"),
        ARJ(".arj", "application/arj"),
        ART(".art", "image/x-jg"),
        ASF(".asf", "video/x-ms-asf"),
        ASM(".asm", "text/x-asm"),
        ASP(".asp", "text/asp"),
        ASX(".asx", "application/x-mplayer2"),
        AU(".au", "audio/basic"),
        AVI(".avi", "application/x-troff-msvideo"),
        AVS(".avs", "video/avs-video"),
        BCPIO(".bcpio", "application/x-bcpio"),
        BIN(".bin", "application/mac-binary"),
        BM(".bm", "image/bmp"),
        BMP(".bmp", "image/bmp"),
        BOO(".boo", "application/book"),
        BOOK(".book", "application/book"),
        BOZ(".boz", "application/x-bzip2"),
        BSH(".bsh", "application/x-bsh"),
        BZ(".bz", "application/x-bzip"),
        BZ2(".bz2", "application/x-bzip2"),
        C(".c", "text/plain"),
        CPLUSPLUS(".c++", "text/plain"),
        CAT(".cat", "application/vnd.ms-pki.seccat"),
        CC(".cc", "text/plain"),
        CCAD(".ccad", "application/clariscad"),
        CCO(".cco", "application/x-cocoa"),
        CDF(".cdf", "application/cdf"),
        CER(".cer", "application/pkix-cert"),
        CHA(".cha", "application/x-chat"),
        CHAT(".chat", "application/x-chat"),
        CLASS(".class", "application/java"),
        COM(".com", "application/octet-stream"),
        CONF(".conf", "text/plain"),
        CPIO(".cpio", "application/x-cpio"),
        CPP(".cpp", "text/x-c"),
        CPT(".cpt", "application/mac-compactpro"),
        CRL(".crl", "application/pkcs-crl"),
        CRT(".crt", "application/pkix-cert"),
        CSH(".csh", "application/x-csh"),
        CSS(".css", "application/x-pointplus"),
        CSV(".csv", "text/csv"),
        CXX(".cxx", "text/plain"),
        DCR(".dcr", "application/x-director"),
        DEEPV(".deepv", "application/x-deepv"),
        DEF(".def", "text/plain"),
        DER(".der", "application/x-x509-ca-cert"),
        DIF(".dif", "video/x-dv"),
        DIR(".dir", "application/x-director"),
        DL(".dl", "video/dl"),
        DOC(".doc", "application/msword"),
        DOCX(".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"),
        DOT(".dot", "application/msword"),
        DP(".dp", "application/commonground"),
        DRW(".drw", "application/drafting"),
        DUMP(".dump", "application/octet-stream"),
        DV(".dv", "video/x-dv"),
        DVI(".dvi", "application/x-dvi"),
        DWF(".dwf", "(old)"),
        DWG(".dwg", "application/acad"),
        DXF(".dxf", "application/dxf"),
        DXR(".dxr", "application/x-director"),
        EL(".el", "text/x-script.elisp"),
        ELC(".elc", "elisp)"),
        ENV(".env", "application/x-envoy"),
        EOT(".eot", "application/vnd.ms-fontobject"),
        EPS(".eps", "application/postscript"),
        ES(".es", "application/x-esrehber"),
        ETX(".etx", "text/x-setext"),
        EVY(".evy", "application/envoy"),
        EXE(".exe", "application/octet-stream"),
        F(".f", "text/plain"),
        F77(".f77", "text/x-fortran"),
        F90(".f90", "text/plain"),
        FDF(".fdf", "application/vnd.fdf"),
        FIF(".fif", "application/fractals"),
        FLAC(".flac", "audio/flac"),
        FLI(".fli", "video/fli"),
        FLO(".flo", "image/florian"),
        FLX(".flx", "text/vnd.fmi.flexstor"),
        FMF(".fmf", "video/x-atomic3d-feature"),
        FOR(".for", "text/plain"),
        FPX(".fpx", "image/vnd.fpx"),
        FRL(".frl", "application/freeloader"),
        FUNK(".funk", "audio/make"),
        G(".g", "text/plain"),
        G3(".g3", "image/g3fax"),
        GIF(".gif", "image/gif"),
        GL(".gl", "video/gl"),
        GSD(".gsd", "audio/x-gsm"),
        GSM(".gsm", "audio/x-gsm"),
        GSP(".gsp", "application/x-gsp"),
        GSS(".gss", "application/x-gss"),
        GTAR(".gtar", "application/x-gtar"),
        GZ(".gz", "application/x-compressed"),
        GZIP(".gzip", "application/x-gzip"),
        H(".h", "text/plain"),
        HDF(".hdf", "application/x-hdf"),
        HELP(".help", "application/x-helpfile"),
        HGL(".hgl", "application/vnd.hp-hpgl"),
        HH(".hh", "text/plain"),
        HLB(".hlb", "text/x-script"),
        HLP(".hlp", "application/hlp"),
        HPG(".hpg", "application/vnd.hp-hpgl"),
        HPGL(".hpgl", "application/vnd.hp-hpgl"),
        HQX(".hqx", "application/binhex"),
        HTA(".hta", "application/hta"),
        HTC(".htc", "text/x-component"),
        HTM(".htm", "text/html"),
        HTML(".html", "text/html"),
        HTMLS(".htmls", "text/html"),
        HTT(".htt", "text/webviewhtml"),
        HTX(".htx", "text/html"),
        ICE(".ice", "x-conference/x-cooltalk"),
        ICO(".ico", "image/x-icon"),
        ICS(".ics", "text/calendar"),
        IDC(".idc", "text/plain"),
        IEF(".ief", "image/ief"),
        IEFS(".iefs", "image/ief"),
        IGES(".iges", "application/iges"),
        IGS(".igs", "application/iges"),
        IMA(".ima", "application/x-ima"),
        IMAP(".imap", "application/x-httpd-imap"),
        INF(".inf", "application/inf"),
        INS(".ins", "application/x-internett-signup"),
        IP(".ip", "application/x-ip2"),
        ISU(".isu", "video/x-isvideo"),
        IT(".it", "audio/it"),
        IV(".iv", "application/x-inventor"),
        IVR(".ivr", "i-world/i-vrml"),
        IVY(".ivy", "application/x-livescreen"),
        JAM(".jam", "audio/x-jam"),
        JAV(".jav", "text/plain"),
        JAVA(".java", "text/plain"),
        JCM(".jcm", "application/x-java-commerce"),
        JFIF(".jfif", "image/jpeg"),
        JFIF_TBNL(".jfif-tbnl", "image/jpeg"),
        JPE(".jpe", "image/jpeg"),
        JPEG(".jpeg", "image/jpeg"),
        JPG(".jpg", "image/jpeg"),
        JPS(".jps", "image/x-jps"),
        JS(".js", "application/x-javascript"),
        JSON(".json", "application/json"),
        JUT(".jut", "image/jutvision"),
        KAR(".kar", "audio/midi"),
        KSH(".ksh", "application/x-ksh"),
        LA(".la", "audio/nspaudio"),
        LAM(".lam", "audio/x-liveaudio"),
        LATEX(".latex", "application/x-latex"),
        LHA(".lha", "application/lha"),
        LHX(".lhx", "application/octet-stream"),
        LIST(".list", "text/plain"),
        LMA(".lma", "audio/nspaudio"),
        LOG(".log", "text/plain"),
        LSP(".lsp", "application/x-lisp"),
        LST(".lst", "text/plain"),
        LSX(".lsx", "text/x-la-asf"),
        LTX(".ltx", "application/x-latex"),
        LZH(".lzh", "application/octet-stream"),
        LZX(".lzx", "application/lzx"),
        M(".m", "text/plain"),
        M1V(".m1v", "video/mpeg"),
        M2A(".m2a", "audio/mpeg"),
        M2V(".m2v", "video/mpeg"),
        M3U(".m3u", "audio/x-mpequrl"),
        MAN(".man", "application/x-troff-man"),
        MAP(".map", "application/x-navimap"),
        MAR(".mar", "text/plain"),
        MBD(".mbd", "application/mbedlet"),
        MC$(".mc$", "application/x-magic-cap-package-1.0"),
        MCD(".mcd", "application/mcad"),
        MCF(".mcf", "image/vasa"),
        MCP(".mcp", "application/netmc"),
        ME(".me", "application/x-troff-me"),
        MHT(".mht", "message/rfc822"),
        MHTML(".mhtml", "message/rfc822"),
        MID(".mid", "application/x-midi"),
        MIDI(".midi", "application/x-midi"),
        MIF(".mif", "application/x-frame"),
        MIME(".mime", "message/rfc822"),
        MJF(".mjf", "audio/x-vnd.audioexplosion.mjuicemediafile"),
        MJPG(".mjpg", "video/x-motion-jpeg"),
        MKA(".mka", "audio/x-matroska"),
        MKV(".mkv", "video/x-matroska"),
        MM(".mm", "application/base64"),
        MME(".mme", "application/base64"),
        MOD(".mod", "audio/mod"),
        MOOV(".moov", "video/quicktime"),
        MOV(".mov", "video/quicktime"),
        MOVIE(".movie", "video/x-sgi-movie"),
        MP2(".mp2", "audio/mpeg"),
        MP3(".mp3", "audio/mpeg3"),
        MP4(".mp4", "video/mp4"),
        MPA(".mpa", "audio/mpeg"),
        MPC(".mpc", "application/x-project"),
        MPE(".mpe", "video/mpeg"),
        MPEG(".mpeg", "video/mpeg"),
        MPG(".mpg", "audio/mpeg"),
        MPGA(".mpga", "audio/mpeg"),
        MPP(".mpp", "application/vnd.ms-project"),
        MPT(".mpt", "application/x-project"),
        MPV(".mpv", "application/x-project"),
        MPX(".mpx", "application/x-project"),
        MRC(".mrc", "application/marc"),
        MS(".ms", "application/x-troff-ms"),
        MV(".mv", "video/x-sgi-movie"),
        MY(".my", "audio/make"),
        MZZ(".mzz", "application/x-vnd.audioexplosion.mzz"),
        NAP(".nap", "image/naplps"),
        NAPLPS(".naplps", "image/naplps"),
        NC(".nc", "application/x-netcdf"),
        NCM(".ncm", "application/vnd.nokia.configuration-message"),
        NIF(".nif", "image/x-niff"),
        NIFF(".niff", "image/x-niff"),
        NIX(".nix", "application/x-mix-transfer"),
        NSC(".nsc", "application/x-conference"),
        NVD(".nvd", "application/x-navidoc"),
        O(".o", "application/octet-stream"),
        ODA(".oda", "application/oda"),
        OGG(".ogg", "audio/ogg"),
        OMC(".omc", "application/x-omc"),
        OMCD(".omcd", "application/x-omcdatamaker"),
        OMCR(".omcr", "application/x-omcregerator"),
        OTF(".otf", "font/otf"),
        P(".p", "text/x-pascal"),
        P10(".p10", "application/pkcs10"),
        P12(".p12", "application/pkcs-12"),
        P7A(".p7a", "application/x-pkcs7-signature"),
        P7C(".p7c", "application/pkcs7-mime"),
        P7M(".p7m", "application/pkcs7-mime"),
        P7R(".p7r", "application/x-pkcs7-certreqresp"),
        P7S(".p7s", "application/pkcs7-signature"),
        PART(".part", "application/pro_eng"),
        PAS(".pas", "text/pascal"),
        PBM(".pbm", "image/x-portable-bitmap"),
        PCL(".pcl", "application/vnd.hp-pcl"),
        PCT(".pct", "image/x-pict"),
        PCX(".pcx", "image/x-pcx"),
        PDB(".pdb", "chemical/x-pdb"),
        PDF(".pdf", "application/pdf"),
        PFUNK(".pfunk", "audio/make"),
        PGM(".pgm", "image/x-portable-graymap"),
        PIC(".pic", "image/pict"),
        PICT(".pict", "image/pict"),
        PKG(".pkg", "application/x-newton-compatible-pkg"),
        PKO(".pko", "application/vnd.ms-pki.pko"),
        PL(".pl", "text/plain"),
        PLX(".plx", "application/x-pixclscript"),
        PM(".pm", "image/x-xpixmap"),
        PM4(".pm4", "application/x-pagemaker"),
        PM5(".pm5", "application/x-pagemaker"),
        PNG(".png", "image/png"),
        PNM(".pnm", "application/x-portable-anymap"),
        POT(".pot", "application/mspowerpoint"),
        POV(".pov", "model/x-pov"),
        PPA(".ppa", "application/vnd.ms-powerpoint"),
        PPM(".ppm", "image/x-portable-pixmap"),
        PPS(".pps", "application/mspowerpoint"),
        PPT(".ppt", "application/mspowerpoint"),
        PPTX(".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"),
        PPZ(".ppz", "application/mspowerpoint"),
        PRE(".pre", "application/x-freelance"),
        PRT(".prt", "application/pro_eng"),
        PS(".ps", "application/postscript"),
        PSD(".psd", "application/octet-stream"),
        PVU(".pvu", "paleovu/x-pv"),
        PWZ(".pwz", "application/vnd.ms-powerpoint"),
        PY(".py", "text/x-script.phyton"),
        PYC(".pyc", "application/x-bytecode.python"),
        QCP(".qcp", "audio/vnd.qcelp"),
        QD3(".qd3", "x-world/x-3dmf"),
        QD3D(".qd3d", "x-world/x-3dmf"),
        QIF(".qif", "image/x-quicktime"),
        QT(".qt", "video/quicktime"),
        QTC(".qtc", "video/x-qtc"),
        QTI(".qti", "image/x-quicktime"),
        QTIF(".qtif", "image/x-quicktime"),
        RA(".ra", "audio/x-pn-realaudio"),
        RAM(".ram", "audio/x-pn-realaudio"),
        RAR(".rar", "application/vnd.rar"),
        RAS(".ras", "application/x-cmu-raster"),
        RAST(".rast", "image/cmu-raster"),
        REXX(".rexx", "text/x-script.rexx"),
        RF(".rf", "image/vnd.rn-realflash"),
        RGB(".rgb", "image/x-rgb"),
        RM(".rm", "application/vnd.rn-realmedia"),
        RMI(".rmi", "audio/mid"),
        RMM(".rmm", "audio/x-pn-realaudio"),
        RMP(".rmp", "audio/x-pn-realaudio"),
        RNG(".rng", "application/ringing-tones"),
        RNX(".rnx", "application/vnd.rn-realplayer"),
        ROFF(".roff", "application/x-troff"),
        RP(".rp", "image/vnd.rn-realpix"),
        RPM(".rpm", "audio/x-pn-realaudio-plugin"),
        RT(".rt", "text/richtext"),
        RTF(".rtf", "application/rtf"),
        RTX(".rtx", "application/rtf"),
        RV(".rv", "video/vnd.rn-realvideo"),
        S(".s", "text/x-asm"),
        S3M(".s3m", "audio/s3m"),
        SAVEME(".saveme", "application/octet-stream"),
        SBK(".sbk", "application/x-tbook"),
        SCM(".scm", "application/x-lotusscreencam"),
        SDML(".sdml", "text/plain"),
        SDP(".sdp", "application/sdp"),
        SDR(".sdr", "application/sounder"),
        SEA(".sea", "application/sea"),
        SET(".set", "application/set"),
        SGM(".sgm", "text/sgml"),
        SGML(".sgml", "text/sgml"),
        SH(".sh", "application/x-bsh"),
        SHAR(".shar", "application/x-bsh"),
        SHTML(".shtml", "text/html"),
        SID(".sid", "audio/x-psid"),
        SIT(".sit", "application/x-sit"),
        SKD(".skd", "application/x-koan"),
        SKM(".skm", "application/x-koan"),
        SKP(".skp", "application/x-koan"),
        SKT(".skt", "application/x-koan"),
        SL(".sl", "application/x-seelogo"),
        SMI(".smi", "application/smil"),
        SMIL(".smil", "application/smil"),
        SND(".snd", "audio/basic"),
        SOL(".sol", "application/solids"),
        SPC(".spc", "application/x-pkcs7-certificates"),
        SPL(".spl", "application/futuresplash"),
        SPR(".spr", "application/x-sprite"),
        SPRITE(".sprite", "application/x-sprite"),
        SRC(".src", "application/x-wais-source"),
        SSI(".ssi", "text/x-server-parsed-html"),
        SSM(".ssm", "application/streamingmedia"),
        SST(".sst", "application/vnd.ms-pki.certstore"),
        STEP(".step", "application/step"),
        STL(".stl", "application/sla"),
        STP(".stp", "application/step"),
        SV4CPIO(".sv4cpio", "application/x-sv4cpio"),
        SV4CRC(".sv4crc", "application/x-sv4crc"),
        SVF(".svf", "image/vnd.dwg"),
        SVG(".svg", "image/svg+xml"),
        SVR(".svr", "application/x-world"),
        SWF(".swf", "application/x-shockwave-flash"),
        T(".t", "application/x-troff"),
        TALK(".talk", "text/x-speech"),
        TAR(".tar", "application/x-tar"),
        TBK(".tbk", "application/toolbook"),
        TCL(".tcl", "application/x-tcl"),
        TCSH(".tcsh", "text/x-script.tcsh"),
        TEX(".tex", "application/x-tex"),
        TEXI(".texi", "application/x-texinfo"),
        TEXINFO(".texinfo", "application/x-texinfo"),
        TEXT(".text", "application/plain"),
        TGZ(".tgz", "application/gnutar"),
        TIF(".tif", "image/tiff"),
        TIFF(".tiff", "image/tiff"),
        TR(".tr", "application/x-troff"),
        TS(".ts", "video/mp2t"),
        TSI(".tsi", "audio/tsp-audio"),
        TSP(".tsp", "application/dsptype"),
        TSV(".tsv", "text/tab-separated-values"),
        TURBOT(".turbot", "image/florian"),
        TXT(".txt", "text/plain"),
        UIL(".uil", "text/x-uil"),
        UNI(".uni", "text/uri-list"),
        UNIS(".unis", "text/uri-list"),
        UNV(".unv", "application/i-deas"),
        URI(".uri", "text/uri-list"),
        URIS(".uris", "text/uri-list"),
        USTAR(".ustar", "application/x-ustar"),
        UU(".uu", "application/octet-stream"),
        UUE(".uue", "text/x-uuencode"),
        VCD(".vcd", "application/x-cdlink"),
        VCS(".vcs", "text/x-vcalendar"),
        VDA(".vda", "application/vda"),
        VDO(".vdo", "video/vdo"),
        VEW(".vew", "application/groupwise"),
        VIV(".viv", "video/vivo"),
        VIVO(".vivo", "video/vivo"),
        VMD(".vmd", "application/vocaltec-media-desc"),
        VMF(".vmf", "application/vocaltec-media-file"),
        VOC(".voc", "audio/voc"),
        VOS(".vos", "video/vosaic"),
        VOX(".vox", "audio/voxware"),
        VQE(".vqe", "audio/x-twinvq-plugin"),
        VQF(".vqf", "audio/x-twinvq"),
        VQL(".vql", "audio/x-twinvq-plugin"),
        VRML(".vrml", "application/x-vrml"),
        VRT(".vrt", "x-world/x-vrt"),
        VSD(".vsd", "application/x-visio"),
        VST(".vst", "application/x-visio"),
        VSW(".vsw", "application/x-visio"),
        W60(".w60", "application/wordperfect6.0"),
        W61(".w61", "application/wordperfect6.1"),
        W6W(".w6w", "application/msword"),
        WAV(".wav", "audio/wav"),
        WB1(".wb1", "application/x-qpro"),
        WBMP(".wbmp", "image/vnd.wap.wbmp"),
        WEB(".web", "application/vnd.xara"),
        WEBM(".webm", "video/webm"),
        WEBP(".webp", "image/webp"),
        WIZ(".wiz", "application/msword"),
        WK1(".wk1", "application/x-123"),
        WMF(".wmf", "windows/metafile"),
        WML(".wml", "text/vnd.wap.wml"),
        WMLC(".wmlc", "application/vnd.wap.wmlc"),
        WMLS(".wmls", "text/vnd.wap.wmlscript"),
        WMLSC(".wmlsc", "application/vnd.wap.wmlscriptc"),
        WOFF(".woff", "font/woff"),
        WOFF2(".woff2", "font/woff2"),
        WORD(".word", "application/msword"),
        WP(".wp", "application/wordperfect"),
        WP5(".wp5", "application/wordperfect"),
        WP6(".wp6", "application/wordperfect"),
        WPD(".wpd", "application/wordperfect"),
        WQ1(".wq1", "application/x-lotus"),
        WRI(".wri", "application/mswrite"),
        WRL(".wrl", "application/x-world"),
        WRZ(".wrz", "model/vrml"),
        WSC(".wsc", "text/scriplet"),
        WSRC(".wsrc", "application/x-wais-source"),
        WTK(".wtk", "application/x-wintalk"),
        XBM(".xbm", "image/x-xbitmap"),
        XDR(".xdr", "video/x-amt-demorun"),
        XGZ(".xgz", "xgl/drawing"),
        XIF(".xif", "image/vnd.xiff"),
        XL(".xl", "application/excel"),
        XLA(".xla", "application/excel"),
        XLB(".xlb", "application/excel"),
        XLC(".xlc", "application/excel"),
        XLD(".xld", "application/excel"),
        XLK(".xlk", "application/excel"),
        XLL(".xll", "application/excel"),
        XLM(".xlm", "application/excel"),
        XLS(".xls", "application/excel"),
        XLSX(".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),
        XLT(".xlt", "application/excel"),
        XLV(".xlv", "application/excel"),
        XLW(".xlw", "application/excel"),
        XM(".xm", "audio/xm"),
        XML(".xml", "application/xml"),
        XMZ(".xmz", "xgl/movie"),
        XPIX(".xpix", "application/x-vnd.ls-xpix"),
        XPM(".xpm", "image/x-xpixmap"),
        XSR(".xsr", "video/x-amt-showrun"),
        XWD(".xwd", "image/x-xwd"),
        XYZ(".xyz", "chemical/x-pdb"),
        X_PNG(".x-png", "image/png"),
        YAML(".yaml", "application/x-yaml"),
        YML(".yml", "application/x-yaml"),
        Z(".z", "application/x-compress"),
        ZIP(".zip", "application/x-compressed"),
        ZOO(".zoo", "application/octet-stream"),
        ZSH(".zsh", "text/x-script.zsh"),
        _3DM(".3dm", "x-world/x-3dmf"),
        _3DMF(".3dmf", "x-world/x-3dmf"),
        _7Z(".7z", "application/x-7z-compressed");

        private final String text, fileAlias;

        ContentType(String fileAlias, String text) {
            this.text = text;
            this.fileAlias = fileAlias;
        }

        public String getFileAlias() {
            return fileAlias;
        }

        @Override
        public String toString() {
            return text;
        }

        @Override
        public ContentType byString(String text) {
            for(ContentType type : values()) {
                if(text.toLowerCase().contains(type.text.toLowerCase())) {
                    return type;
                }
            }
            return ContentType.BIN;
        }

        public static ContentType byAlias(String fileAlias) {
            for(ContentType type : values()) {
                if(fileAlias.equalsIgnoreCase(type.fileAlias.substring(1))) {
                    return type;
                }
            }
            return ContentType.BIN;
        }

        public static ContentType byFile(String name) {
            for(ContentType type : values()) {
                if(name.toLowerCase().endsWith(type.fileAlias)) {
                    return type;
                }
            }
            return ContentType.BIN;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }

    public enum HeaderType implements Parseable {

        // REQUEST HEADERS

        ACCEPT,
        ACCEPT_ENCODING,
        ACCEPT_CHARSET,
        ACCEPT_LANGUAGE,
        AUTHORIZATION,
        CACHE_CONTROL,
        CONNECTION,
        COOKIE,
        CONTENT_ENCODING,
        CONTENT_LENGTH,
        CONTENT_MD5,
        CONTENT_TRANSFER_ENCODING,
        CONTENT_TYPE,
        DATE,
        EXPECT,
        FORWARDED,
        FROM,
        HOST,
        IF_MATCH,
        IF_MODIFIED_SINCE,
        IF_NONE_MATCH,
        IF_RANGE,
        IF_UNMODIFIED_SINCE,
        LOCATION,
        MAX_FORWARDS,
        PRAGMA,
        PROXY_AUTHORIZATION,
        RANGE,
        REFERER,
        REFERRER,
        SET_COOKIE,
        SERVER,
        TE,
        TRAILER,
        TRANSFER_ENCODING,
        UPGRADE,
        UPGRADE_INSECURE_REQUESTS,
        USER_AGENT,
        VIA,
        WARNING,
        WWW_AUTHENTICATE,
        CUSTOM("CUSTOM_IDENTIFIER");

        // RESPONSE HEADERS

        //....

        private final String identifier;

        HeaderType(String identifier) {
            this.identifier = identifier;
        }

        HeaderType() {
            this.identifier = super.toString();
        }

        @Override
        public String toString() {
            return this.identifier.replaceAll("_", "-").toLowerCase();
        }

        @Override
        public HeaderType byString(String key) {
            key = key.replaceAll("-", "_");

            for(HeaderType anyType : values()) {
                if (anyType.identifier.equalsIgnoreCase(key))
                    return anyType;
            }
            return CUSTOM;
        }

        @Override
        public Parseable any() {
            return values()[0];
        }
    }
}
