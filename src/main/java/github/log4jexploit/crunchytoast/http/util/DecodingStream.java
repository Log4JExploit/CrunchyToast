/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.zip.DeflaterInputStream;
import java.util.zip.GZIPInputStream;

public class DecodingStream extends InputStream {

    private final Http.Encoding[] encodings;
    private final InputStream encodedStream;
    private InputStream filterStack;

    public DecodingStream(Http.Encoding[] encodings, InputStream encodedStream) {
        this.encodedStream = encodedStream;
        this.encodings = encodings;
        try {
            init();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    private void init() throws IOException {
        this.filterStack = this.encodedStream;
        List<Http.Encoding> encodingList = new ArrayList<>(List.of(encodings));
        Collections.reverse(encodingList);

        for(Http.Encoding encoding : encodingList) {
            filterStack =  switch (encoding) {
                case GZIP: yield new GZIPInputStream(filterStack);
                case DEFLATE: yield new DeflaterInputStream(filterStack);
                case ZSTD:
                case CHUNKED:
                case BR:
                case BASE64:
                    throw new IOException("Unsupported encoding: "+ Http.Encoding.BASE64);
            };
        }
    }

    @Override
    public int read() throws IOException {
        return filterStack.read();
    }

    @Override
    public int available() throws IOException {
        return super.available();
    }
}
