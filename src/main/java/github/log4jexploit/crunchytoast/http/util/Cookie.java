/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import github.log4jexploit.crunchytoast.general.Pair;
import github.log4jexploit.crunchytoast.general.Parseable;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.Predicate;

public class Cookie {

    private DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;

    private LocalDateTime expires;
    private SameSite sameSite;
    private boolean httpOnly;
    private boolean secure;
    private String domain;
    private String value;
    private String name;
    private String path;
    private int maxAge;


    private Cookie() {

    }


    public LocalDateTime getExpires() {
        return expires;
    }

    public void setExpires(LocalDateTime expires) {
        this.expires = expires;
    }

    public SameSite getSameSite() {
        return sameSite;
    }

    public void setSameSite(SameSite sameSite) {
        this.sameSite = sameSite;
    }

    public boolean isHttpOnly() {
        return httpOnly;
    }

    public void setHttpOnly(boolean httpOnly) {
        this.httpOnly = httpOnly;
    }

    public boolean isSecure() {
        return secure;
    }

    public void setSecure(boolean secure) {
        this.secure = secure;
    }

    public String getDomain() {
        return domain;
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public int getMaxAge() {
        return maxAge;
    }

    public void setMaxAge(Duration maxAge) {
        this.maxAge = Long.valueOf(maxAge.getSeconds()).intValue();
    }

    @Override
    public String toString() {
        Map<String, Pair<Predicate<Cookie>, Function<Cookie, String>>> parsers = new HashMap<>();
        parsers.put("Secure", new Pair<>((c) -> c.secure, (c) -> ""));
        parsers.put("HttpOnly", new Pair<>((c) -> c.httpOnly, (c) -> ""));
        parsers.put("SameSite", new Pair<>((c) -> c.sameSite != null, (c) -> c.sameSite.toString()));
        parsers.put("Max-Age", new Pair<>((c) -> c.maxAge != 0, (c) -> String.valueOf(c.maxAge)));
        parsers.put("Path", new Pair<>((c) -> c.path != null, (c) -> c.path));
        parsers.put("Domain", new Pair<>((c) -> c.domain != null, (c) -> c.domain));
        parsers.put("Expires", new Pair<>((c) -> c.expires != null, (c) -> c.expires.atZone(ZoneId.of("UTC")).format(formatter)));

        StringBuilder builder = new StringBuilder();
        builder.append(this.name).append("=").append(this.value);

        for (Map.Entry<String, Pair<Predicate<Cookie>, Function<Cookie, String>>> entry : parsers.entrySet())
            if(entry.getValue().getValueA().test(this))
                if(entry.getValue().getValueB().apply(this).isBlank())
                    builder
                            .append(";")
                            .append(entry.getKey());
                else
                    builder
                            .append(";")
                            .append(entry.getKey())
                            .append("=")
                            .append(entry.getValue().getValueB().apply(this));

        return builder.toString();
    }

    public static class Builder {
        private static final Map<String, BiConsumer<Cookie, String>> map;

        static {
            map = new HashMap<>();
            map.put("Domain", Builder::setDomainByString);
            map.put("Path", Builder::setPathByString);
            map.put("HttpOnly", Builder::setHttpOnlyByString);
            map.put("SameSite", Builder::setSameSiteByString);
            map.put("Max-Age", Builder::setMaxAgeByString);
            map.put("Expires", Builder::setExpiresByString);
            map.put("Secure", Builder::setSecureByString);
        }

        private static void setDomainByString(Cookie cookie, String domain) {
            cookie.domain = domain.trim().toLowerCase();
        }

        private static void setHttpOnlyByString(Cookie cookie, String httpOnly) {
            cookie.httpOnly = true;
        }

        private static void setSecureByString(Cookie cookie, String secure) {
            cookie.secure = true;
        }

        private static void setPathByString(Cookie cookie, String path) {
            cookie.path = path.trim().toLowerCase().split("\\?")[0];
        }

        private static void setMaxAgeByString(Cookie cookie, String maxAge) {
            cookie.maxAge = Integer.parseInt(maxAge);
        }

        private static void setExpiresByString(Cookie cookie, String expires) {
            cookie.expires = LocalDateTime.parse(expires, DateTimeFormatter.RFC_1123_DATE_TIME);
        }

        private static void setSameSiteByString(Cookie cookie, String sameSite) {
            cookie.sameSite = SameSite.STRICT.byString(sameSite);
        }

        /**
         * Parses the given cookie or set-cookie header value
         * @param text the cookie text
         * @return the parsed {@link Cookie}
         */
        public static Cookie parse(String text) {
            text = text.trim();

            final Cookie cookie = new Cookie();

            String[] keyValue = (text.contains(";") ?
                    text.substring(0, text.indexOf(";")) :
                    text
            ).split("=");

            cookie.name = keyValue[0];
            cookie.value = keyValue[1];

            String[] arguments = text
                    .substring(text.indexOf(";") + 1)
                    .split(";");

            for(String argument : arguments) {
                String key = argument.split("=")[0];
                String value = argument.split("=")[1];
                map.getOrDefault(
                        key,
                        (a, b) -> {} // Do nothing, if null returned
                ).accept(cookie, value);
            }

            return cookie;
        }

        public static Cookie create() {
            return new Cookie();
        }
    }



    public enum SameSite implements Parseable {
        NONE,
        LAX,
        STRICT;

        @Override
        public String toString() {
            return super.toString().toLowerCase();
        }

        @Override
        public SameSite byString(String text) {
            for(SameSite value : values()) {
                if(value.toString().equalsIgnoreCase(text))
                    return value;
            }
            return null;
        }

        @Override
        public SameSite any() {
            return STRICT;
        }
    }
}
