/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.zip.*;

// Coded by Zadex at 24/10/2022
public final class DecodingInputStream {

    private final ByteArrayInputStream inputStream;


    public DecodingInputStream(String[] encodings, byte[] data) {
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            buffer.write(data);
            buffer.flush();

            ArrayList<String> list = new ArrayList<>(Arrays.asList(encodings));
            Collections.reverse(list);

            for(String encoding : list) {
                byte[] content = buffer.toByteArray();
                buffer.reset();
                switch (encoding) {
                    case "gzip" -> {
                        GZIPInputStream gzipInput = new GZIPInputStream(new ByteArrayInputStream(content));
                        buffer.write(gzipInput.readAllBytes());
                        buffer.flush();
                        gzipInput.close();
                    }
                    case "deflate" -> {
                        InflaterInputStream deflateInput = new InflaterInputStream(new ByteArrayInputStream(content));
                        buffer.write(deflateInput.readAllBytes());
                        buffer.flush();
                        deflateInput.close();
                    }
                }
            }
            this.inputStream = new ByteArrayInputStream(buffer.toByteArray());
        } catch (IOException e) {
            throw new UncheckedIOException(e.getMessage(), e);
        }
    }


    public byte[] readAllBytes() {
        return this.inputStream.readAllBytes();
    }

    public int read() {
        return this.inputStream.read();
    }
}
