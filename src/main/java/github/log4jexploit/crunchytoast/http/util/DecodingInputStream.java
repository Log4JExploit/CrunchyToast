/*
 * Copyright (c) 2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.util;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.zip.GZIPInputStream;
import java.util.zip.InflaterInputStream;

// Coded by Zadex at 24/10/2022
public final class DecodingInputStream {

    private final ByteArrayInputStream inputStream;


    public DecodingInputStream(String[] encodings, byte[] data) {
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            buffer.write(data);

            ArrayList<String> list = new ArrayList<>(Arrays.asList(encodings));
            Collections.reverse(list);

            for(String encoding : list) {
                byte[] content = buffer.toByteArray();
                buffer.reset();
                InputStream stream = switch (encoding) {
                    case "gzip" -> new GZIPInputStream(new ByteArrayInputStream(content));
                    case "deflate" -> new InflaterInputStream(new ByteArrayInputStream(content));
                    case "chunked" -> new BufferedInputStream(new ByteArrayInputStream(content));
                    default -> throw new RuntimeException("Unsupported compression algorithm!");
                };
                buffer.write(stream.readAllBytes());
                buffer.flush();
                stream.close();
            }
            this.inputStream = new ByteArrayInputStream(buffer.toByteArray());
        } catch (IOException e) {
            throw new UncheckedIOException(e.getMessage(), e);
        }
    }


    public byte[] readAllBytes() {
        return this.inputStream.readAllBytes();
    }

    public int read() {
        return this.inputStream.read();
    }
}
