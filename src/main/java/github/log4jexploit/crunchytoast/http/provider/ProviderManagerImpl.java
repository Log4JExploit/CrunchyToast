/*
 * Copyright (c) 2022-2024 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.http.provider;

import github.log4jexploit.crunchytoast.exceptions.HttpProtocolException;
import github.log4jexploit.crunchytoast.general.CommonText;
import github.log4jexploit.crunchytoast.http.message.inf.HttpRequest;
import github.log4jexploit.crunchytoast.http.message.inf.HttpResponse;
import github.log4jexploit.crunchytoast.http.util.Http;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.function.Supplier;


public class ProviderManagerImpl implements ProviderManager {

    private static final Supplier<HttpResponse> NOT_FOUND = () -> HttpResponse
            .compose()
            .withResponse(CommonText.HTTP_ERR_NO_ROUTE)
            .withCode(Http.ResponseCode.NOT_FOUND)
            .build();

    private final List<Provider> providers;


    public ProviderManagerImpl() {
        this.providers = new ArrayList<>();
    }


    public Optional<HttpResponse> apply(HttpRequest request) throws HttpProtocolException {
        if(runPreChecks(request)) {
            return Optional.of(NOT_FOUND.get());
        }

        for(Provider provider : providers) {
            Optional<HttpResponse> response = provider.apply(request);
            if(response.isPresent()) {
                return response;
            }
        }

        return Optional.of(NOT_FOUND.get());
    }


    private boolean runPreChecks(final HttpRequest request) {
        List<Predicate<HttpRequest>> preChecks = List.of(
                (e) -> e.getRequestType().equals(Http.RequestType.CONNECT),
                (e) -> e.getRequestType().equals(Http.RequestType.OPTIONS)
        );

        return preChecks.stream().anyMatch(
                (preCheck) -> preCheck.test(request)
        );
    }

    @Override
    public void register(Provider provider) {
        this.providers.add(provider);
    }

    @Override
    public void unregister(Provider provider) {
        this.providers.remove(provider);
    }
}
