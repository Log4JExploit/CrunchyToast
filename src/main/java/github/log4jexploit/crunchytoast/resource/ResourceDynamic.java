/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.resource;

import github.log4jexploit.crunchytoast.http.util.Http;

import java.io.*;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.function.Supplier;

public class ResourceDynamic implements Resource {

    private final Http.ContentType contentType;
    private final Supplier<byte[]> dataSupplier;
    private final Supplier<InputStream> streamSupplier;
    private final Supplier<Long> sizeSupplier;


    public ResourceDynamic(File file, Http.ContentType contentType) {
        this(
                () -> {
                    try {
                        return Files.readAllBytes(file.toPath());
                    } catch (IOException e) {
                        throw new UncheckedIOException("Error while reading file resource: "+e.getMessage(), e);
                    }
                },
                () -> {
                    try {
                        return new FileInputStream(file);
                    } catch (IOException e) {
                        throw new UncheckedIOException("Error while creating stream of file: "+e.getMessage(), e);
                    }
                },
                file::length,
                contentType
        );
    }

    public ResourceDynamic(
            Supplier<byte[]> dataSupplier,
            Supplier<InputStream> streamSupplier,
            Supplier<Long> sizeSupplier,
            Http.ContentType contentType)
    {
        this.streamSupplier = streamSupplier;
        this.dataSupplier = dataSupplier;
        this.sizeSupplier = sizeSupplier;
        this.contentType = contentType;
    }


    @Override
    public Http.ContentType getContentType() {
        return contentType;
    }

    @Override
    public byte[] getData() {
        if(sizeSupplier.get() > Integer.MAX_VALUE)
            throw new RuntimeException("Resource can't be retrieved: Resource would exceed max array size!");
        return dataSupplier.get();
    }


    @Override
    public byte[] getDataRange(long offset, int length) {
        offset = Math.min(offset, getSize());
        int minLength = Math.min(length, (int)(this.getSize() - offset));
        byte[] buffer = new byte[minLength];

        try(InputStream in = streamSupplier.get()) {
            long skipped = in.skip(offset);
            if(skipped < offset)
                throw new IOException("Did not skip as many bytes as expected!");
            int readBytes = in.read(buffer, 0, minLength);

            if(readBytes < minLength) {
                return Arrays.copyOfRange(buffer, 0, readBytes);
            }
        } catch (IOException e) {
            throw new UncheckedIOException("Error while reading file resource: "+e.getMessage(), e);
        }
        return buffer;
    }

    @Override
    public InputStream getDataAsStream() {
        return streamSupplier.get();
    }

    @Override
    public long getSize() {
        return sizeSupplier.get();
    }

    @Override
    public boolean isSizeKnown() {
        return true;
    }
}
