/*
 * Copyright (c) 2022-2025 CrunchyToast by Log4JExploit
 * Do you keep my non-compiled source code?
 * Then keep this comment.  (View the license)
 */

package github.log4jexploit.crunchytoast.websocket.impl;

import github.log4jexploit.crunchytoast.http.inbound.impl.HttpServer;
import github.log4jexploit.crunchytoast.http.inbound.inf.HttpClient;
import github.log4jexploit.crunchytoast.websocket.inf.WSClient;
import org.jetbrains.annotations.NotNull;

import java.net.Socket;
import java.util.Objects;
import java.util.function.BiConsumer;

@SuppressWarnings("unused")
public abstract class WSServer extends HttpServer {

    private BiConsumer<WSClient, byte[]> packetConsumer;
    private boolean masked;


    public WSServer(int port) {
        this(port, "127.0.0.1");
    }

    public WSServer(int port, String bindingIP) {
        super(port, bindingIP, 4);
        this.logger.setClass(this.getClass());
        this.packetConsumer = (client, packet) -> {};
    }

    @Override
    protected HttpClient createHttpClient(Socket socket) {
        WSClientImpl client = new WSClientImpl(socket, WSServer.this);
        client.setMasked(this.masked);
        return client;
    }

    public void setPacketConsumer(@NotNull BiConsumer<WSClient, byte[]> packetConsumer) {
        this.packetConsumer = Objects.requireNonNull(packetConsumer);
    }

    public BiConsumer<WSClient, byte[]> getPacketConsumer() {
        return (client, packet) -> this.packetConsumer.accept(
                Objects.requireNonNull(client),
                Objects.requireNonNull(packet)
        );
    }

    public void setMasked(boolean masked) {
        this.masked = masked;
    }

    public boolean isMasked() {
        return this.masked;
    }
}
